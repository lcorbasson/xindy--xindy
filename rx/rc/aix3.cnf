/* $Id$  -*- C -*-
 *----------------------------------------------------------------------
 * written by Joachim Schrod <schrod@iti.informatik.th-darmstadt.de>.
 * This file is distributed without any copyright restriction.
 */

/*
 * Define macros which explains how an AIX 3.x with c89 installed
 * is to be treated.
 * This file should not be configured by you, adapt config.gen instead.
 * It should be named config.h for usage.
 *
 * In this file we define only macros which tells abilities and
 * features of certain environments. We don't define reactions to this
 * abilities -- this is done in other files depending on the
 * definitions below.
 *
 * As a default we assume that we want an ISO compliant system. Your
 * mileage may vary, especially if you are used to work on a BSD-like
 * system, but IMO that's the future. ISO compliance means conformance
 * to ISO/IEC 9899 (also ANSI X3.158-1989; Standard C, aka ANSI C) and
 * ISO/IEC 9945 (also IEEE 1003; aka POSIX).
 *
 * An important point is that this file may define more specifying
 * abilities that your concrete application may need. (It's shared
 * over several applications.) Your installation notes should tell you
 * which definitions you really need. Of course, it would be best to
 * specify all definitions and sent the result back to me for
 * inclusion in further distributions.
 *
 * (history at end)
 */


/*
 * The capabilities are categorized as follows:
 *
 * COMPILER STUFF
 *  -- compiler
 *         infos about the compiler's characteristics are placed here
 *
 * DECLARATIONS
 *  -- compliance of header files
 * 	   infos about the compliance of your environment
 *         also level of compliance, etc.
 *  -- non-std, but important declarations resp. header files
 * 	   tells if you have declarations/header files, which are not part
 *         of ANSI or POSIX but which are available often and sometimes
 *         needed. Note that in this section only declarations are handled
 *         -- if functions are available is the topic of another section.
 *  -- header files of non-compliant systems
 * 	   infos about available header files which have similar purposes
 *         as the std header files. Usually these are `classic' UNIX header
 *	   files.
 *
 *
 * LIBRARIES
 * 	   If std header files are available, we also assume the existence
 *         of std libraries.
 *  -- non-std, but important functions
 * 	   infos about the availability of functions which are not part
 *         of the ANSI or POSIX libraries but are useful often. That a
 *         function is available does not necessarily imply that it's
 *         declaration is also available (see above).
 *  -- functions of non-compliant systems
 * 	   infos about available functions with similar purposes as the
 *         std functions. Usually these are `classic' UNIX functions.
 */



/*======================================================================
 *
 *	COMPILER ABILITIES
 *
 */

/* HAS_VOID
 * 	Does your compiler allow definitions of void functions?
 *
 * HAS_VOIDP
 * 	Does your compiler support (void*) as a generic pointer type?
 *      It must be possible to assign values of this type to all other
 *      pointer types. Furthermore comparisons on equality must be possible
 *      between a value of this type and all other pointers.
 */
#define	HAS_VOID
#define	HAS_VOIDP

/* HAS_LONG_IDS
 *	Does your compiler/linker distinguish external identifiers
 *	in their first 31 chars?
 *	   If this symbol is not defined we assume that the compiler
 *	distinguishs external identifiers in their first 6 characters.
 */
#define	HAS_LONG_IDS

/* NEED_BOOLEAN_INT
 *	Does your compiler choke on mixes of enums and ints?
 *	Then Boolean must not be an enum (better for debugging!), but an int.
 */
/* Changed for gcc-2.7.0  17.01.1997 RK */
/* #undef	NEED_BOOLEAN_INT */
#define	NEED_BOOLEAN_INT

/* HAVE_FUNCTION_TEMPLATES
 *	[C++ only] Does your C++ compiler supports function templates,
 *	also in different compilation units?
 */
#ifdef __cplusplus
#define	HAVE_FUNCTION_TEMPLATES		/* After all, g++ supports it! */
#endif



/*======================================================================
 *
 * 	DECLARATIONS
 *
 */


/*------------------------------------------------------------
 *
 *	compliance of header files
 */

/* INC_POSIX
 * 	Has your system the POSIX include files / libraries?
 *      Ie: dirent.h, fcntl.h, unistd.h, etc.
 *
 *	If this symbol is defined it must have a numeric value which
 *	outlines the level of POSIX compliance. Ie, 1 means conforms
 *	to POSIX.1, 2 means conforms to POSIX.2, etc.
 * 	    This enables the definition of _POSIX_C_SOURCE and similar
 *	macros for controlling the namespace of the application.
 */
#define	INC_POSIX 2

/* INC_STDC
 * 	Has your system the Standard C include files?
 *      Ie: stddef.h, stdlib.h, string.h, etc.
 *      This also implies INC_STDLIB, HAS_STD_STRING_DECL, etc.
 */
#define	INC_STDC

/* MALLOCPTRTYPE
 * 	This symbol defines the kind of ptr returned by malloc and realloc.
 *      In an early ANSI draft this was (char *).
 */
#define	MALLOCPTRTYPE (void *)

/* INCLFILE_STD_REPAIR
 *	Do you have errors in your system header files which prevent
 *	you from using them although you would be able otherwise?
 *	    If you are able to repair the error by yet another header
 *	file (most probably self-written) which shall be included
 *	after all standard system header files, you should define the
 *	name of this file here. This macro will be used as
 *
 *	#include INCLFILE_STD_REPAIR
 *
 *	so you will need to surround the name by quotes or angles.
 */
#undef	INCLFILE_STD_REPAIR


/*------------------------------------------------------------
 *
 *	important declarations / header files, non-std
 */

/* HAS__TOUPPER
 *	This symbol tells if your <ctype.h> defines unsave versions of
 *	toupper()/tolower() which does not check their arguments. These
 *	unsave versions are macros and named _toupper() and _tolower().
 */
#define _ILS_MACROS
#define	_toupper _XUPPER
#define	_tolower _XLOWER
#define	HAS__TOUPPER

/* HAS_STRDUP_DECL
 *	Does your system declare strdup()?
 */
#undef	HAS_STRDUP_DECL

/* HAS_STRCASECMP_DECL
 *	Does your system declare strcasecmp()?
 */
#undef	HAS_STRCASECMP_DECL

/* HAS_VFORK_DECL
 *	Does your system declare vfork(), ie, the efficient BSD fork()
 *	where only exec() and _exit() is allowed in the child process?
 */
#undef	HAS_VFORK_DECL


/*------------------------------------------------------------
 *
 *	header files of non-std systems
 */

/* INC_MALLOC
 * 	Has your system the include file malloc.h?
 *
 *	*Important*: Check also MALLOCPTRTYPE above and
 *	CAN_REALLOC_NULL below.
 *
 *	Note: If you defined INC_STDC this macro will not be looked at
 *	-- then the malloc() declarations are found in <stdlib.h>.
 */
#define	INC_MALLOC

/* INCLFILE_SIZE_T
 * 	This is the include file which defines size_t on your system.
 *      It *must* be either in the form <file> or "file" since it is
 *      used as
 *
 *      #include INCLFILE_SIZE_T
 */
#define	INCLFILE_SIZE_T <sys/types.h>

/* INC_STDLIB
 * 	Has your system the Standard C include file stdlib.h?
 *      Ie: with exit(), malloc(), system(), EXIT_FAILURE, EXIT_SUCCESS, etc.
 *
 *	Note: If you defined INC_STDC this macro will not be looked at
 *	-- then <stdlib.h> is there anyhow.
 *
 * Since on classic UNIX systems this often not there, we undef it as default.
 */
#define	INC_STDLIB

/* HAS_SAVE_TOUPPER_DECL
 *	This symbol tells if your <ctype.h> declares save versions of
 *	toupper/tolower which check their arguments. See also HAS__TOUPPER.
 *	    If this flag is defined it does not imply that there are
 *	really functions with this name. There might be just macros.
 *
 * Since this is not true on BSD systems, we undef it.
 */
#define	HAS_SAVE_TOUPPER_DECL

/* HAS_STD_STRING_DECL
 *	Is <string.h> with the standard definitions available?
 *	In fact, these are also the System V ones. Ie, with strchr/strrchr.
 *	If this symbol is not defined, it is assumed that declarations
 *	for the BSD string functions (ie, with index/rindex) are
 *	available, in <strings.h>.
 *
 * If you do not have one of them, you should write one...
 */
#define	HAS_STD_STRING_DECL

/* HAS_MEMORY_DECL
 *	Is <memory.h> available?
 *
 *	Note: This does not include the declaration of memmove(), see below.
 */
#define	HAS_MEMORY_DECL

/* HAS_MEMMOVE_DECL
 * 	Is memmove() declared either in <memory.h> or in <string.h>?
 *
 * Since this is often not the case, we undef it.
 */
#define	HAS_MEMMOVE_DECL

/* SIGTYPE
 *	This symbol's value is either "void" or "int", corresponding to the
 *	appropriate return "type" of a signal handler.
 */
#define	SIGTYPE void




/*======================================================================
 *
 *	LIBRARIES
 *
 */


/*------------------------------------------------------------
 *
 *	capabilities of standard libraries
 *
 * Here we take care of common errors and problems of std library
 * implementations.
 */

/* CAN_REALLOC_NULL
 * 	Does realloc(NULL, size) and realloc(ptr, 0) work?
 *      Ie: the first is equivalent to malloc(size), the second to free(ptr).
 *
 * If this is not the case, you should consider to get a standard package.
 */
#define	CAN_REALLOC_NULL


/*------------------------------------------------------------
 *
 *	important functions, non-std
 */

/* HAS_STRDUP
 *	Is strdup() in your system library?
 */
#define	HAS_STRDUP

/* HAS_STRCASECMP
 *	Is strcasecmp() in your system library?
 */
#undef	HAS_STRCASECMP

/* HAS_VFORK
 *	Does your system support vfork(), ie, the efficient BSD fork()
 *	where only exec() and _exit() is allowed in the child process?
 */
#undef	HAS_VFORK


/*------------------------------------------------------------
 *
 *	functions of non-std systems
 */

/* HAS_BCOPY
 * 	Has your system the BSD memory routines?
 *      Ie: bcopy(), bcmp(), bzero().
 */
#undef	HAS_BCOPY

/* HAS_SAVE_TOUPPER
 *	This symbol tells if your system has save versions of
 *	toupper()/tolower() as functions which check their arguments.
 *	    See also HAS_SAVE_TOUPPER_DECL. Note that an available
 *	declaration does not imply that this flag is set: The
 *	declaration might be a macro.
 *
 * Since this is not true on BSD systems, we undef it.
 */
#undef	HAS_SAVE_TOUPPER

/* HAS_STD_STRINGS
 *	Are the standard string functions available?
 *	In fact, these are also the System V ones. Ie, with strchr/strrchr.
 *	If this symbol is not defined, it is assumed that the BSD
 *	string functions (ie, with index/rindex) are available.
 *
 * If you do not have one of them, you should fetch a standard package
 * (or, even better, another C system...).
 * (There's a SysV compatible string package out, from Henry Spencer.)
 */
#define	HAS_STD_STRINGS

/* HAS_GETENV
 *	Is getenv() available?
 */
#define	HAS_GETENV

/* HAS_MEMORY
 *	Are the Sys V memory functions available?
 *
 *	Note: This does not include memmove()!
 *
 * If HAS_BCOPY is also not defined, ie, if the BSD memory functions
 * are also not available, you should get a standard library.
 */
#define	HAS_MEMORY

/* HAS_MEMMOVE
 * 	Is the ANSI C function memmove() available()?
 *
 * Since this is often not the case, we undef it.
 */
#define	HAS_MEMMOVE




/*======================================================================
 *
 * $Log$
 * Revision 1.2  1997/01/17 16:44:23  kehr
 * Several changes for new version 1.1.
 *
 * Revision 1.1  1996/07/18  15:59:44  kehr
 * This file is necessary to complile the libordrules.
 *
 * Revision 1.7  1995/02/06  16:59:07  schrod
 *     Add macros to work with C++ compilers that don't support function
 * templates.
 *
 * Revision 1.6  1994/07/19  14:30:50  herr
 * Added options for strcasecmp().
 *
 * Revision 1.5  1992/12/22  12:35:58  schrod
 *     Flag definitions around the availibility of toupper() and friends
 * were inconsistent.
 *
 * Revision 1.4  1992/06/18  14:15:59  schrod
 *     Reordered, it's more readable now (hopefully :-).
 *     New: NEED_BOOLEAN_INT, INCLFILE_STD_REPAIR, HAS__TOUPPER,
 * HAS_STRDUP_DECL, HAS_VFORK_DECL, HAS_STD_STRING_DECL,
 * HAS_MEMORY_DECL, HAS_MEMMOVE_DECL.
 *     Renamed: INC_SIZE_T -> INCLFILE_SIZE_T.
 *     Deleted: The path declarations.
 *
 * Revision 1.3  1992/03/17  16:51:17  schrod
 *     bcopy() functions are not available on our generic system.
 *     strdup() declaration is asserted, even if it's not standard. (We
 * need it too often.)
 *     function declarations are prefixed with extern.
 *
 * Revision 1.2  1992/03/16  14:53:06  schrod
 *     Added HAS_VFORK.
 *
 * Revision 1.1  1992/03/13  14:26:38  schrod
 * First version for lib+prog stuff.
 *
 */
