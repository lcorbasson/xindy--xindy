#!/usr/local/bin/perl
#
# $Id$
#
# This is the perl-frontend to the xindy indexing system.
# interface.
#

($progname = $0) =~ s#.*/##;

$Date = `date`;

require "getopts.pl";

# $debug = 1;

$numArgs = $#ARGV;          # save number of Commandline-Arguments

# parse for command-line options
&Getopts( "dtvio:l:f:L:" );

$debug = $opt_d;

# some debug-output
print STDERR "progname:  $progname\n"  if $debug;
print STDERR "\@ARGV:  @ARGV\n"  if $debug;
print STDERR "\$#ARGV: $#ARGV\n" if $debug;

sub usage {
   print STDERR "\n$progname\t[-t] [-v] [-o output] [-l logfile] [-f filtprg] [-L n]
\tindexstyle raw-index\n";
   print STDERR <<EOMSG;

options:

  -t       Enters tracing-mode for markup-tags.
  -v       Displays the current version of xindy.
  -o       Specifies the output-file for the tagged index. If omitted, the
           name of the raw-index is taken, with its extension
           substituted by \`.ind'.
  -f filt  Preprocess raw-index with \`filtprg' before reading.
  -l file  Logfile into which xindy writes useful information.
  -L n     Enter logging level \`n' = {1,2,3}.

EOMSG
   exit(2);
}

sub check_bin {
    if ( ! -e $runfile ) {
	print "Can't find \`$runfile' !\n";
	exit(3);
    }
    if ( ! -x $runfile ) {
	print "File \`$runfile' not executable !\n";
	exit(4);
    }
}

sub check_mem {
    if ( ! -e "$memfile" ) {
	print "Can't find \`$memfile' !";
	exit(5);
    }
}

# This function takes a string and quotes the `"' and '\' characters
# with a leading backslash.

sub quote_string {
    local($str) = @_;
    $str =~ s#\\#\\\\#g;
    $str =~ s#"#\\\"#g;
    return $str;
}

sub remove_suffix {
    local($str) = @_;
    $str =~ s#\.[^\.]*$##;
    return $str;
}

#
# here we go...
#

$numArgs = $#ARGV;          # number of Commandline-Arguments

if ( $numArgs eq 1 || $opt_v || $opt_i ) { # two arguments or -v,-i specified
   $Idxsty = $ARGV[0];
   $Rawidx = $ARGV[1];
} else {
    &usage;
}

print "Idxsty = $Idxsty\n" if $debug;
print "Rawidx = $Rawidx\n" if $debug;

# Define the default xindy library directory It should be in a xindy
# subdirectory of a sibling lib directory. Use /usr/local/lib/xindy if
# such a directory does not exist. If /usr/local/lib/xindy does not
# exist as well, the user must set XINDY_LIBDIR explicitely.

$XINDY_LIBDIR=$ENV{"XINDY_LIBDIR"};

if ( "" eq "$XINDY_LIBDIR" ) {
    ($LibDir = $0) =~ s#(.*)/[^/]*$#\1#;
    if ( $LibDir eq "" ) {
	$LibDir = ".";
    }
    $LibDir="$LibDir/../lib/xindy";
    if ( ! -d $LibDir ) {
	$LibDir="@XINDY_LIBDIR@";
    }
    $XINDY_LIBDIR=$LibDir;
}

print "XINDY_LIBDIR = $XINDY_LIBDIR\n" if $debug;

$memfile="$XINDY_LIBDIR/xindy.mem";
$runfile="$XINDY_LIBDIR/xindy.run";

# Set initial searchpath
$SEARCHPATH="(searchpath \".:@XINDY_MODULEDIR@\")";

# Add/replace (depends on the specification) the search path according
# to the environment variable
if ( $XINDY_SEARCHPATH ne "" ) {
    $SEARCHPATH="$SEARCHPATH (searchpath \"$XINDY_SEARCHPATH\")";
}
print "SEARCHPATH = $SEARCHPATH\n" if $debug;

if ($opt_v) { $version = ":show-version t"; }
if ($opt_t) { $tracing = ":markup-trace t"; }
if ($opt_n) { $try = 1; }
if ($opt_c) { $compile = "on"; }
if ($opt_i) { $interactive = "on"; }
if ($opt_m) { $memfile = $opt_m; }
if ($opt_o) { $output = $opt_o; }
if ($opt_f) { $filtprg = $opt_f; }
if ($opt_l) { $logfile = $opt_l; }
if ($opt_L) { $level = $opt_L; }

# Now check if everything is present.

if ( ! $try ) {
    &check_bin;
    &check_mem;
}

$xindy_run = "$runfile -q -M $memfile";
print "xindy_run = $xindy_run\n" if $debug;

# Run xindy interactive if this was specified via -i.
if ( $interactive ) {
    print "$xindy_run\n";
    exec "$xindy_run";
}

# If specified via -v start xindy for showing the version-message.
if ( "" ne $version ) {
    print "$xindy_run -x \"(progn (xindy:startup $version) (exit))\"";
    exec "$xindy_run -x \"(progn (xindy:startup $version) (exit))\"";
}

exit;

# Quote the filenames, such that LISP can read it.
$Idxsty = &quote_string($Idxsty);
$Rawidx = &quote_string($Rawidx);

# If no output-file was specified
if ( "" eq $output ) {
    # remove the suffix, if one exists
    $output = &remove_suffix($Rawidx);
    # append suffix ".ind"
    $output = &quote_string("$output.ind");
}

# Run the intermediate filter if specified via -f.
if ( "" ne $filtprg ) {
    # create tmpfile
    print "Running filter: $filtprg ...";
    $tmpfile = "/tmp/xindy.$$";
    # make ordinary exit and interruptions to remove $tmpfile
    # FIXME: Missing traps
    #trap "/bin/rm $tmpfile" 0
    #trap "exit 4" 1 2 3 15
    system "$filtprg < $rawindex > $tmpfile";
    print "Finished running filter.";
    $rawindex = &quote_string($tmpfile);
}

# Prepare logfile option.
if ( "" ne $logfile ) {
    $logfile = ":logfile \"" . &quote_string($logfile) . "\"";
}

# Prepare trace-level.
if ( "" ne $level ) {
    $logging = ":trace-level $level";
}

# This is the complete LISP-SEXP needed to start the system.
$xindy_cmd = "-x
(progn
   $SEARCHPATH
   (xindy:startup :idxstyle \"$indexstyle\"
	          :rawindex \"$rawindex\"
		  :output   \"$output\"
		  $logfile $version $tracing $logging)
   (exit))";

if ( "" ne "$try" ) {
    print  $xindy_run . "$xindy_cmd";
} else {
    exec $xindy_run "$xindy_cmd";
}


#
# $Log$
# Revision 1.8  1997/04/03 09:38:54  kehr
# First check-in of the rewritten xindy script. The former shell-script
# has now been replaced by a perl-script.
#
#

# Local Variables:
# mode: perl
# End:
