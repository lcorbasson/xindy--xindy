#!/bin/sh
#
# $Id$
#
# This is a shell-skript containing the wrapper for the `xindy'
# indexing system.
#

#
# Some functions.
#

usage() {
	echo -e "
`basename $0`\t[-t] [-v] [-o output] [-l logfile] [-f filtprg] [-L n]
\tindexstyle raw-index

options:

  -t       Enters tracing-mode for markup-tags.
  -v       Displays the current version of xindy.
  -o       Specifies the output-file for the tagged index. If omitted, the
           name of the raw-index is taken, with its extension
           substituted by \`.ind'.
  -f filt  Preprocess raw-index with \`filtprg' before reading.
  -l file  Logfile into which xindy writes useful information.
  -L n     Enter logging level \`n' = {1,2,3}.

"
	exit 2
}

check_bin() {
   if [ ! -f $runfile ]
   then
     echo "can't find \`$runfile' !"
     exit 3
   fi
   if [ ! -x $runfile ]
   then
     echo "\`$runfile' not executable !"
     exit 4
   fi
}

check_mem() {
   if [ ! -f "$memfile" ]
   then
     echo "can't find \`$memfile' !"
     exit 5
   fi
}

#
# here we go...
#

if [ $# = 0 ]
then
    usage
fi

# Define the default xindy library directory It should be in a xindy
# subdirectory of a sibling lib directory. Use /usr/local/lib/xindy if
# such a directory does not exist. If /usr/local/lib/xindy does not
# exist as well, the user must set XINDY_LIBDIR explicitely.

if [ "" = "$XINDY_LIBDIR" ]
then
    LibDir=`expr $0 : '\(.*\)/'`
    : ${LibDir:=.}
    LibDir=$LibDir/../lib/xindy
    test -d $LibDir  ||  LibDir="@XINDY_LIBDIR@"
    XINDY_LIBDIR=$LibDir
fi

memfile="$XINDY_LIBDIR/xindy.mem"
runfile="$XINDY_LIBDIR/xindy.run"

# Parse all arguments.

while true
do
  case $1 in
    -v) version=":show-version t"
        shift;;
    -t) tracing=":markup-trace t"
        shift;;
    -n) try=1
        shift;;
    -c) compile=on
        shift;;
    -i) interactive=on
        shift;;
    -m) shift
	memfile="$1"
        shift;;
    -o) shift
	output="$1"
        shift;;
    -f) shift
	filtprg="$1"
        shift;;
    -l) shift
	logfile="$1"
        shift;;
    -L) shift
	level="$1"
        shift;;
    -*) usage;;
     *) break;;
  esac
done

# Now check if everything is present.

if [ "" != "$try" ]
then
   check_bin
   check_mem
fi

xindy_run="$runfile -q -M $memfile"

if [ "" != "$interactive" ]
then
   $xindy_run
   exit
fi

quote_string() {
   echo "$1" | sed -e 's/"/\\\"/g' -e 's/\\/\\\\/g'
}

if [ "" != "$compile" ]
then
    if [ $# != 1 ]  # -c takes only one argument
    then
        usage
    fi
    indexstyle=`quote_string "$1"`
    xindy_cmd="-c $indexstyle"
else
    if [ "" != "$version" ]
    then
        exec $xindy_run -x "(progn (xindy:startup $version) (exit))"
    fi
    if [ $# != 2 ]  # we expect exactly two arguments
    then
        usage
    fi
    indexstyle=`quote_string "$1"`
    rawindex=`quote_string "$2"`
    if [ "$output" = "" ]
    then
	# remove the suffix, if one exists
        output="`echo $2 | sed -e 's/\.[^\.]*$//'`"
	# append suffix ".ind"
        output=`quote_string "$output.ind"`
    fi
    if [ "" != "$filtprg" ]
    then
	# create tmpfile
	echo "Running filter: $filtprg ..."
	tmpfile=/tmp/xindy.$$
	# make ordinary exit and interruptions to remove $tmpfile
	trap "/bin/rm $tmpfile" 0
	trap "exit 4" 1 2 3 15
	$filtprg < "$rawindex" > "$tmpfile"
	echo "Finished running filter."
	rawindex=`quote_string "$tmpfile"`
    fi
    if [ "$logfile" != "" ]
    then
        logfile=":logfile \"`quote_string "$logfile"`\""
    fi
    if [ "" != "$level" ]; then
	logging=":trace-level $level"
    fi
    xindy_cmd="-x
(progn
   (xindy:startup :idxstyle \"$indexstyle\"
	          :rawindex \"$rawindex\"
		  :output   \"$output\"
		  $logfile $version $tracing $logging)
   (exit))"
fi

if [ "" != "$try" ]
then
    echo $xindy_run "$xindy_cmd"
else
    exec $xindy_run "$xindy_cmd"
fi

