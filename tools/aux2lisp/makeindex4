#!/usr/local/bin/perl
#
# $Id$
#
# This is a perl-script that wraps xindy into a makeindex-like
# interface.
#

$progname=`basename $0`;
chop($progname);

$Date = `date`;

require "getopts.pl";

# $debug = 1;

$numArgs = $#ARGV;          # save number of Commandline-Arguments

# parse for makeindex command-line options
&Getopts( "dcgilo:p:qrs:t:" );

$debug = $opt_d;

# some debug-output
print STDERR "\@ARGV:  @ARGV\n"  if $debug;
print STDERR "\$#ARGV: $#ARGV\n" if $debug;

sub welcome {
   print STDERR "\nusage:\t$progname [makeindex options] tex-index-file\n";
   print STDERR <<EOMSG;

This file is a wrapper that makes `xindy' somehow behave as
`makeindex' does. Currenly it does not parse all command-line
arguments and some of the flags are differently implemented in the
xindy system. So don't expect it to be a plug-in replacement for the
makeindex-system.

For more information concering compatibility between makeindex and
`xindy' see the "Quick Guide" that comes with the distribution of `xindy'.

Go with the future and move to the new features of xindy!
EOMSG
   exit(1);
}

$numArgs = $#ARGV;          # number of Commandline-Arguments
if ( $numArgs eq 0 )        # only one argument
  { $Index = $ARGV[0]; }    # the index
else { &welcome; }

print "Index = $Index\n" if $debug;
$IndexBase = $Index;
$IndexBase =~ s#\.[^\.]*$##;
print "IndexBase = $IndexBase\n" if $debug;
$TmpStyle = $IndexBase . ".xdy";
open(STY, ">$TmpStyle");

print STY <<EOSTY;
;; This file is generated automatically by `makeindex4'.
;; Date: $Date
;;
;; It is a temporary style-file that is necessary to run `xindy' properly.

EOSTY

if ($opt_c) { print STY <<EOSTY;

;; These lines implement the blank compression defined by
;; the -c switch of makeindex.

(merge-rule " +"  " " :eregexp)
(merge-rule "^[ \t]+" ""   :again :eregexp)
(merge-rule "[ \t]+$" "" :again :eregexp)
EOSTY
}

if ($opt_g) { print STDERR "The option -g not supported!\n"; }

if ($opt_i) { $UseStdin = 1; }

if ($opt_l) { print STY <<EOSTY;
(sort-rule \" \" \"\")
EOSTY
}

if ($opt_q) { print STDERR "The option -q not supported!\n"; }

if ($opt_r) { print STDERR "The option -r not supported!\n"; }

if ($opt_o) { $OutputFile = $opt_o; }

if ($opt_p) { print STDERR "The option -p not supported!\n"; }

if ($opt_s) { print STDERR "The option -s not supported!\n"; }

if ($opt_t) { $LogFile = $opt_t; }

if ( $Index eq $IndexBase ) { $Index = $IndexBase . ".idx"; }
print "Index = $Index\n" if $debug;

unless ($OutputFile) { $OutputFile = $IndexBase . ".ind"; }
print "Outputfile = $OutputFile\n" if $debug;

unless ($LogFile) { $LogFile = $IndexBase . ".ilg"; }
print "Logfile = $LogFile\n" if $debug;

$RawIndex = $IndexBase . ".raw";
$RawIndexStat = $IndexBase . ".sta";

$CmdLine = "tex2xindy $RawIndexStat < $Index > $RawIndex";
print "\nRunning tex2xindy...\n";
print "+ $CmdLine\n";
system($CmdLine);

open(STA, "sort $RawIndexStat | uniq |");

$Attr = "(define-attributes ((";
while( <STA> ) {
    chop;
    ($attr, $type) = split(/\t/);
    if ($type eq "locref") {
	unless ($attr eq "") {
	    $LocAttrs .= "\"$attr\" ";
	    $LocMarkup .= "(markup-locref :open \"\\$attr" .
		"{\" :close \"}\" :attr \"$attr\")\n";
	}
    } else {
	$XrefAttrNames .= "\"$attr\" ";
	$XrefAttrs .= "(define-crossref-class \"$attr\")\n";
	$XrefMarkup .= "(markup-crossref-list :open \"\\$attr" .
	    "{\" :close \"}{}\")";
    }
}

print STY <<EOSTY;

;; The following attributes were detected.

(define-attributes (($LocAttrs\"default\")))

;; This is the markup as generated by makeindex.

$LocMarkup

;; The following cross-referernces were detected.

$XrefAttrs

;; This is the markup as generated by makeindex.

$XrefMarkup

;; Here are the location-classes

(define-location-class "arabic-page-numbers" ("arabic-numbers"))
(define-location-class "roman-page-numbers"  ("roman-numbers-lowercase"))
(define-location-class "Roman-page-numbers"  ("roman-numbers-uppercase"))
(define-location-class "alpha-page-numbers"  ("alpha"))
(define-location-class "Alpha-page-numbers"  ("ALPHA"))

(define-location-class-order ("roman-page-numbers"
			      "arabic-page-numbers"
			      "alpha-page-numbers"
			      "Roman-page-numbers"
			      "Alpha-page-numbers"
			      $XrefAttrNames))

;; Now load the rest of the makeindex-module...

(setq *defined* t)
(require "makeidx.xdy")

;; End
EOSTY

close(STY);

$CmdLine = "xindy -o $OutputFile -l $LogFile $TmpStyle $RawIndex";
print "\nRunning xindy...\n";
print "+ $CmdLine\n";
exec($CmdLine);

#
# $Log$
# Revision 1.3  1997/01/21 16:44:33  kehr
# Bugfix: State <print> was not changed back to <key> if {LEVEL} was found.
#
# Revision 1.2  1997/01/17 16:30:35  kehr
# Rewrote makeindex4 and heavily modified tex2xindy.
#
#
