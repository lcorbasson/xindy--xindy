%%
%% This file is part of the `makeindex4'-project at the
%% Technical University Darmstadt, Computer Science Department
%% WG System Programming, Germany.
%%
%% This source is entirely written in the `noweb' literate programming
%% system.
%%
%% History at end
%%
%% Module: user-interface
%%
%%
\RCS $Id$%
\RCS $Author$%
\RCS $Revision$%
\RCS $RCSfile$%
\RCS $State$%
\RCS $Date$%
%
\ModuleTitle{}


\section{Submodule \sans{user-interface}}

\subsection{Introduction}

This module contains all functions that are available in the user
interface.


\subsection{Abstract Specification}


\subsubsection{Definition}


\subsubsection{Operation}



\subsection{Concrete Specification}


\subsubsection{Definition of alphabets and enumerations}

This method adds a new basetype to the list of defined basetypes.

<<User-interface>>=
(defmethod basetype (name symbols &key (idxcls-name *active-idxcls-name*))
  (add idxcls-name (make-alphabet name symbols)))
@

This is a convenience-method to allow defining one-letter-alphabets by
just giving on string whose characters define a symbol.

<<User-interface>>=
(defmethod basetype-by-string (name string
                               &key (idxcls-name *active-idxcls-name*))
  (basetype name (string-to-list string) :idxcls-name idxcls-name))
@

Now comes the general function to create enumeration-classes. Because
class [[enumeration]] serves as a base-class we give the name of the
class we like to make an instatiation of as a symbol. Have a look at
the instantiations made in file [[idxstyle]] to see an example.

<<User-interface>>=
(defun enumeration (enum-class enum-name
                    &optional (base-alphabet "")
                    &key (idxcls-name *active-idxcls-name*))
  (add idxcls-name
                  (make-enumeration enum-class enum-name base-alphabet)))
@

\subsubsection{Composition of location-classes}

The user-interface allows the user to compose a description of a
location-class. We will hide this in future versions by an additonal
layer of abstraction. Therefore we use the prefix [[compose-]] for all
those functions that we nedd to compose a location-class.

If no joining-layers are specified it defaults to the last layer of
the compose location-class. We use function [[num-of-basetypes]] to
calculate the number of basetypes defined in the structure.

<<User-interface>>=
(defun compose-location-class (name
                               layers
                               &key
                               (join-layers (num-of-basetypes layers))
                               (indexclass *active-idxcls-name*))
  (add indexclass
                  (checked-make-location-class name layers
                                               join-layers)))
@

\paragraph{Basetypes and separators}

<<User-interface>>=
(defun compose-basetype (name &optional
                              (markup (make-locref-layer-markup)))
  (let ((base (find-basetype name)))
    (if (null base)
        (format t "compose-basetype: unknown basetype `~A' !~%" name)
      (make-loccls-layer base markup))))

(defun compose-separator (separator &optional
                                    (markup (make-locref-layer-markup)))
  (make-loccls-separator separator markup))
@


\subsubsection{Markup}

<<User-interface>>=
(defun keyword-markup (&rest arguments
                       &key (indexclass *active-idxcls-name*)
                       &allow-other-keys)
  (add indexclass
                  (apply #'make-keyword-layer-markup arguments)))
@

\subsubsection{Indexentries}

<<User-interface>>=
(defun idxent (locref key &optional (optattr "default"))
  (gen-indexentries :locref-str locref
                    :merge-key key
                    :sort-key  key
                    :print-key key
                    :optattr optattr))
@

\subsubsection{Index-rules}

The function [[merge-to]] is used as the external interface to add a
rule to the active indexclass.

<<User-interface>>=
(defun merge-to (source-attr target-attr)
  (add *active-idxcls-name*
                  (make-merge-rule source-attr target-attr))
  (values))
@

To specify a \textsf{separated/mixed}-rule and add it to the currently
active index use the following function.

<<User-interface>>=
(defun separated-mixed (attribute-list)
  (set *active-idxcls-name*
                  (make-rule-separated-mixed attribute-list)))
@




<<Submodule \module{intface}>>=

<<User-interface>>
@

<<RCS-Identifier>>=
("intface" . "$Id$")
@


%% Local Variables:
%% mode: latex
%% TeX-master: t
%% End:
%%
%% $Log$
%% Revision 1.3  1995/12/19 10:58:50  kehr
%% Complete restructuring.
%%
%% Revision 1.2  1995/12/15  17:08:28  kehr
%% Rewrote module compilation with noweb and clisp.
%%
%% Revision 1.1  1995/12/07  18:14:26  kehr
%% Renamed module `idxclass' to 'idxstyle'. Resturcturing module from scratch.
%%
%% Revision 1.4  1995/12/07  13:21:34  kehr
%% Dies ist das Projekt zum Zeitpunkt der Abgabe.
%%
%% Revision 1.3  1995/11/21  14:55:17  kehr
%% Added support for DejaGnu-Framework.
%%
%% Revision 1.2  1995/11/08  16:18:09  kehr
%% Minor modifications.
%%
%% Revision 1.1  1995/10/16  19:23:08  kehr
%% Initial source checkin.
%%
%%
