%%
%% This file is part of the `xindy'-project at the
%% Technical University Darmstadt, Computer Science Department
%% WG System Programming, Germany.
%%
%% This source is entirely written in the `noweb' literate programming
%% system.
%%
%% History at end
%%
%% Module: index-style
%%
%%
\RCS $Id$%
\RCS $Author$%
\RCS $Revision$%
\RCS $RCSfile$%
\RCS $State$%
\RCS $Date$%
%
\ModuleTitle{}


\section{Submodule \module{index-style}}

\subsection{Introduction}

The indexstyle is defined by a set of indexclasses. This allows the
user to define several different indexclasses for different purposes.
We're currently unsure about the needs the users will have so we
decided to use a simple model. We declare a pre-defined indexclass
[[default]] that contains some basic alphabets and basetypes. The
users are able to extend the definitions made in this class by
defining location-classes, rules, markups \etc as they like.

\bigskip

In the future we plan that users may define additional classes. If a
user adds a new indexclass its definitions \emph{shadow} the
definitions made in class [[default]].  So a new indexclass
\emph{inherits} is components from class [[default]] and extends or
shadows those inherited definitions. There exist no inheritance
definitions among the user-defined indexclasses.


\subsection{Concrete Specification}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{The Indexstyle}

<<The indexstyle>>=
(defun create-indexclass (idxcls-name)
  (setq *indexstyle* (make-indexclass idxcls-name)))
@ %def create-indexclass

<<Export-list of submodule \module{idxstyle}>>=
(export 'create-indexclass)
@

\begin{TODO}
  \item Define the hierarchy of indexclasses and implement the
  [[find-]]functions corresponding to the defined hierarchy.
\item Implement the rest of the neccessary [[find-]]functions that are
  still unimplemented yet.
\end{TODO}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{Predefined default style}

\subsubsection{Global definitions}

The indexstyle itself will be initialised later after all functions are known.

<<Global indexstyle definitions>>=
(defparameter *indexstyle* nil)
(defparameter *indexstyle-readtable* (copy-readtable))
(defparameter *included-files* '())
(defvar *load-paths* "")
(defparameter *default-load-paths* *load-paths*)

(defparameter *default-minimum-range-length* 2)
(defparameter *default-locref-hierdepth*     0)
@ %def *indexstyle* *indexstyle-readtable* *included-files* *default-load-paths* *default-minimum-range-length* *default-locref-hierdepth*

<<Export-list of submodule \module{idxstyle}>>=
(export '*load-paths*)
@

<<Global indexstyle initialisation>>=
<<Initialize indexclass [[default]]>>
<<Define default alphabets>>
<<Define default enumerations>>
@

<<Initialize indexclass [[default]]>>=
(create-indexclass "default")
@

\subparagraph{Latin alphabets}

These are the predefined alphabets for upper- and lowercase letters.

<<Define default alphabets>>=
(defmacro string-expand (str)
  (let ((str-expansion
         (map 'list
              #'(lambda (c)
                  (make-string 1 :initial-element c))
              str)))
    `(QUOTE ,str-expansion)))

(define-alphabet* "ALPHA"  (string-expand "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
(define-alphabet* "alpha"  (string-expand "abcdefghijklmnopqrstuvwxyz"))
(define-alphabet* "digits" (string-expand "0123456789"))
@ %def string-expand


\subparagraph{Arabic numbers}

Here follows a general-purpose function
[[prefix-match-for-radix-numbers]] which is capable to recognize
radix-based numbers with a radix ranging from 2\ldots36.

<<Define default enumerations>>=
(defun prefix-match-for-radix-numbers (str radix)
  (let* ((n nil)
         (strlen (length str))
         (len-match (do ((i 0 (1+ i)))
                        ((or (>= i strlen)
                             (not (digit-char-p (char str i) radix)))
                           i)
                      (setq n (+ (* (if n n 0) radix)
                                 (digit-char-p (char str i) radix))))))
    (values (subseq str 0 len-match)
            (subseq str len-match)
            n)))
@

\no Here follows the definition of a enumeration type for positive
arabic numbers. First we define a new class that is subclass of
[[enumeration]]. We then define the method [[prefix-match]] which is
bound to our new class and calculation is forwarded by giving the
help-function [[prefix-match-for-radix-numbers]] a radix of 10. We
could implement enumeration types for binary, octal and hexadecimal
numbers straightforward by defining new classes and binding them with
the radixes 2, 8 and 16. Finally we make the new enumeration type
known in the indexclass [[default]] by defining a new class of name
[[enumeration-arabic-numbers]], a name and the string containing the
basetype-characters. Quiet easy, isn't it ?

<<Define default enumerations>>=
(define-enumeration "arabic-numbers"
                    #'(lambda (str)
                        (prefix-match-for-radix-numbers str 10))
                    "0123456789")
@ %def arabic-numbers


\subparagraph{Roman numbers}

Since we need roman numbers as, well the following functions implement
enumeration types for them. There exist two systems for roman numbers.
The older one defines \textsf{`iiii'} to be the arabic number `4',
whereas the newer system declares \textsf{`iv'} to be equivalent to
`4'. I think that we should use a parser that is able to recognize
both types simultaneously. The implementation of the parser does not
always recognize invalid input, but I think we should trust the
text-processing system to generate valid numbers.

We use a simple lookup-mechanism to parse the numbers. The following
tables encode the most common numbers and encodes both, the old and
the new numbering scheme.

<<Define default enumerations>>=
(defparameter *lowercase-roman-numbers-lookup-table*
  '((#\i ("ix" . 9) ("iv" . 4) ("iiii" . 4) ("iii". 3) ("ii" . 2) ("i" . 1))
    (#\v ("viiii" . 9)  ("viii" . 8)  ("vii" . 7)  ("vi" . 6)  ("v" . 5))
    (#\x ("xc" . 90) ("xl" . 40) ("x" . 10))
    (#\m ("m" . 1000))
    (#\c ("cm" . 900) ("cd" . 400) ("c" . 100))
    (#\l ("lxxxx" . 90) ("lxxx" . 80) ("lxx" . 70) ("lx" . 60) ("l" . 50))
    (#\d ("dcccc" . 900) ("dccc" . 800) ("dcc" . 700) ("dc" . 600) ("d" . 500))
    ))

(defparameter *uppercase-roman-numbers-lookup-table*
  '((#\I ("IX" . 9) ("IV" . 4) ("IIII" . 4) ("III". 3) ("II" . 2) ("I" . 1))
    (#\V ("VIIII" . 9)  ("VIII" . 8)  ("VII" . 7)  ("VI" . 6)  ("V" . 5))
    (#\X ("XC" . 90) ("XL" . 40) ("X" . 10))
    (#\M ("M" . 1000))
    (#\C ("CM" . 900) ("CD" . 400) ("C" . 100))
    (#\L ("LXXXX" . 90) ("LXXX" . 80) ("LXX" . 70) ("LX" . 60) ("L" . 50))
    (#\D ("DCCCC" . 900) ("DCCC" . 800) ("DCC" . 700) ("DC" . 600) ("D" . 500))
    ))
@ %def *lowercase-roman-numbers-lookup-table* *uppercase-roman-numbers-lookup-table*

\no Ok, here it goes! The function [[roman-number-prefix-match]]
returns the same values as any ordinary [[prefix-match]] function. We
define a generic function that operates an arbitrary tables of the
above form and define two instances to the enumerations for both
(uppercase and lowercase) numbers.

<<Define default enumerations>>=
(defun roman-number-prefix-match (roman-number-string *table*)
  (let ((result 0)
        (str roman-number-string)
        (last-val 100000) #| hope that's enough |#
        (str-len (length roman-number-string))
        ch table match-cons curr-val
        )
    (loop (when (= 0 (length str))
            (return (values roman-number-string "" result)))
          (setq ch (aref str 0))
          (setq table (cdr (assoc ch *table*)))
          (setq match-cons
                (find-if #'(lambda (cons)
                             (let* ((prefix (car cons))
                                    (match-len (string/= prefix str)))
                               (or (not match-len)
                                   (= match-len (length prefix)))))
                         table))
          (unless match-cons
            (return (if (= 0 result)
                        (values nil nil nil)
                        (values (subseq roman-number-string
                                        0 (- str-len (length str)))
                                str result))))
          (setq curr-val (cdr match-cons))
          (when (> curr-val last-val)
            (return (values (subseq roman-number-string
                                    0 (- str-len (length str)))
                            str result)))
          (incf result curr-val)
          (setq last-val curr-val)
          (setq str (subseq str (length (car match-cons)))))))
@ %def roman-number-prefix-match

<<Define default enumerations>>=
(define-enumeration "roman-numbers-uppercase"
                    #'(lambda (str)
                        (roman-number-prefix-match
                         str
                         *uppercase-roman-numbers-lookup-table*))
                    "IVXLCDM")

(add-alias *indexstyle* "roman-numbers-uppercase" "ROMAN")
(add-alias *indexstyle* "roman-numbers-uppercase" "roman-numerals-uppercase")

(define-enumeration "roman-numbers-lowercase"
                    #'(lambda (str)
                        (roman-number-prefix-match
                         str
                         *lowercase-roman-numbers-lookup-table*))
                    "ivxlcdm")

(add-alias *indexstyle* "roman-numbers-lowercase" "roman")
(add-alias *indexstyle* "roman-numbers-lowercase" "roman-numerals-lowercase")

@ %def roman-numbers-uppercase roman-numbers-lowercase


\no The following function may be used to test the implementation
<<Test function for roman numbers>>=
(defun test-roman-numbers (*table* &optional (up-to 10))
  (let (match rest ordnum error)
    (loop for n from 1 to up-to
          do
          (let ((str (string-downcase (with-output-to-string (s)
                                        (format s "~@R" n)))))
            (multiple-value-setq (match rest ordnum)
              (roman-number-prefix-match str *table*))
            (format t "~A: ~S = (~S ~S ~S)~%" n str match rest ordnum)
            (when (or (/= n ordnum)
                      (string/= rest ""))
              (setq error nil)
              (print "ERROR"))))
    (if error
        'ERROR
        'PASSED)))
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{The module root}

<<*>>=
;; $Id$
;;

(lisp:defpackage "IDXSTYLE")
(lisp:in-package "IDXSTYLE")
(lisp:provide "idxstyle")

(lisp:use-package "CLOS")
(lisp:require "base")
(lisp:use-package "BASE")
#+(and :XP CLISP) (lisp:use-package "XP")
(lisp:require "locref")
(lisp:use-package "LOCREF")
<<Use [[ordrules]]-package if available>> ;; see submodule intface

<<Global indexstyle definitions>>

<<Submodule \module{intface}>>
<<Submodule \module{idxrule}>>
<<Submodule \module{idxclass}>>
<<Submodule \module{indexstyle}>>
<<Submodule \module{letters}>>

<<Global indexstyle initialisation>>

<<Pretty-printing>>

(defvar *RCS-Identifier* '( <<RCS-Identifier>> ))

<<Export-list of submodule \module{idxstyle}>>
@

\subsubsection{The submodule root}

<<Submodule \module{indexstyle}>>=
<<The indexstyle>>
@

<<RCS-Identifier>>=
("idxstyle" . "$Id$")
@

%% $Log$
%% Revision 1.18  1997/03/26 14:04:54  kehr
%% Fixed a bug in (destructuring-switch-bind) that made the system fail on
%% Allegro CL. Bug did not occur in CLISP since (set-difference) keeps
%% the order of the first list there.
%%
%% Revision 1.17  1997/03/18 14:49:50  kehr
%% Checkin after the several changes. a) the definition of slot-accessor
%% macros in the whole source, b) the modifications suggested by Bernd
%% Raichle to make the source compatible with Allegro CL and c) a first
%% version of the new sorting scheme.
%%
%% Revision 1.16  1997/03/13 14:40:51  kehr
%% Changed all IN-PACKAGE, DEFPACKAGE, REQUIRE, PROVIDE declarations to
%% be compatible with ANSI CL. Bug was reported by Bernd Raichle.
%%
%% Revision 1.15  1997/01/17 16:42:08  kehr
%% Several changes for new version 1.1.
%%
%% Revision 1.14  1996/07/03  18:41:41  kehr
%% Checkin after some modifications of the error-system and the loading of
%% indexstyle-modules have been made. Affects all modules.
%%
%% Revision 1.13  1996/06/24  09:12:27  kehr
%% Several changes in all Lisp-modules due to the new startup-module and
%% the implementation of the percentage bar appearing in the processing
%% phases.
%%
%% Revision 1.12  1996/06/03  10:01:13  kehr
%% Added support for treeing layered-location-references.
%%
%% Revision 1.11  1996/05/29  15:42:35  kehr
%% Added the enumerations for roman numbers.
%%
%% Revision 1.10  1996/05/29  14:15:26  kehr
%% Complete checkin after the major changes in the markup. See ChangeLog
%% for details.
%%
%% Revision 1.9  1996/05/20  08:47:54  kehr
%% Major release of the modules locref, idxstyle and index.
%%
%% Revision 1.8  1996/05/09  11:49:32  kehr
%% Changes in all submodules, due to macro-expansion problems during
%% compilation.
%%
%% Revision 1.7  1996/03/28  16:46:33  kehr
%% Changed indexstule modules to work with the new foreign package `ordrules'.
%%
%% Revision 1.6  1996/03/13  16:50:47  kehr
%% Ok, here I am. Included support for regular expressions. Minor changes
%% in all other parts of this module. Made some tests but had some
%% problems with LISP stack overflow errors. Don't know where they came
%% from. We'll see. The next step is to implement the string replacement
%% mechanism and set up extensive tests. Maybe I can use the tests from
%% Henry Spencer's regexp library.
%%
%% Revision 1.5  1996/01/31  15:29:22  kehr
%% Made a lot of modifications to the whole module. Currently I'm working
%% on the implementation of the indexstyle-interface.
%%
%% Revision 1.4  1996/01/09  14:26:14  kehr
%% Major modifications.
%%
%% Revision 1.3  1995/12/19  10:58:48  kehr
%% Complete restructuring.
%%
%% Revision 1.2  1995/12/15  17:08:26  kehr
%% Rewrote module compilation with noweb and clisp.
%%
%% Revision 1.1  1995/12/07  18:14:24  kehr
%% Renamed module `idxclass' to 'idxstyle'. Resturcturing module from scratch.
%%
%% Revision 1.4  1995/12/07  13:21:31  kehr
%% Dies ist das Projekt zum Zeitpunkt der Abgabe.
%%
%% Revision 1.3  1995/11/21  14:55:16  kehr
%% Added support for DejaGnu-Framework.
%%
%% Revision 1.2  1995/11/08  16:18:05  kehr
%% Minor modifications.
%%
%% Revision 1.1  1995/10/16  19:23:07  kehr
%% Initial source checkin.
%%
%% Revision 1.4  1995/07/23  20:48:34  kehr
%% Major changes in the location-reference-processing. Full support for
%% merge-to and separate-mixed--rules. The whole processing of
%% location-refernces is more structured now and can be easier maintained.
%%
%% Revision 1.3  1995/07/10  23:26:58  kehr
%% Corrected bugs that caused location-class-matching to fail. Also
%% discovered some bugs in matching under certain circumstances, I hadn't
%% tested so far.
%%
%% Revision 1.2  1995/07/10  00:58:17  kehr
%% Completed noweb-support. Current version must be debugged to correct
%% some minor errors.
%%
%% Revision 1.1  1995/07/09  18:14:28  kehr
%% Initial checkin.

%% Local Variables:
%% mode: lisp
%% TeX-master: t
%% End:

