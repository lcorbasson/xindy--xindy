%%
%% This file is part of the `makeindex4'-project at the
%% Technical University Darmstadt, Computer Science Department
%% WG System Programming, Germany.
%%
%% This source is entirely written in the `noweb' literate programming
%% system.
%%
%% History at end
%%
%% Module: index-style
%%
%%
\RCS $Id$%
\RCS $Author$%
\RCS $Revision$%
\RCS $RCSfile$%
\RCS $State$%
\RCS $Date$%
%
\ModuleTitle{}


\section{Module \sans{index-style}}

\subsection{Introduction}

This module defines all predefined basetypes od the indexclass [[default]].


\subsection{Concrete Specification}

These are the predefined alphabets for upper- and lowercase letters.
<<alphabets>>=
(basetype-by-string "ALPHA" "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(basetype-by-string "alpha" "abcdefghijklmnopqrstuvwxyz")

@

Here follows a general-purpose function
[[prefix-match-for-radix-numbers]] which is capable to recognize
radix-based numbers with a radix ranging from 2\ldots36.

<<help-functions>>=
(defun prefix-match-for-radix-numbers (str radix)
  (let* ((n nil)
         (strlen (length str))
         (len-match (do ((i 0 (1+ i)))
                        ((or (>= i strlen)
                             (not (digit-char-p (char str i) radix)))
                           i)
                      (setq n (+ (* (if n n 0) radix)
                                 (digit-char-p (char str i) radix))))))
    (values (subseq str 0 len-match)
            (subseq str len-match)
            n)))
@

Here follows the definition of a enumeration type for positive arabic
numbers. First we define a new class that is subclass of
[[enumeration]]. We then define the method [[prefix-match]] which is
bound to our new class and calculation is forwarded by giving the
help-function [[prefix-match-for-radix-numbers]] a radix of 10. We
could implement enumeration types for binary, octal and hexadecimal
numbers straightforward by defining new classes and binding them with
the radixes 2, 8 and 16. Finally we make the new enumeration type
known in the indexclass [[default]] by defining a new class of name
[[enumeration-arabic-numbers]], a name and the string containing the
basetype-characters. Quiet easy, isn't it ?

<<enumerations>>=
(defclass enumeration-arabic-numbers (enumeration) ())

(defmethod prefix-match ((str string) (enum enumeration-arabic-numbers))
  (prefix-match-for-radix-numbers str 10))

(enumeration 'enumeration-arabic-numbers
             "Arabic Numbers"
             "01234567890")
@

<<*>>=
(provide 'idxstyle)
(require 'basetype)
(use-package 'clos)

<<help-functions>>
<<alphabets>>
<<enumerations>>
@

%% Local Variables:
%% mode: latex
%% TeX-master: t
%% End:
%%
%% $Log$
%% Revision 1.2  1995/11/08 16:18:05  kehr
%% Minor modifications.
%%
%% Revision 1.1  1995/10/16  19:23:07  kehr
%% Initial source checkin.
%%
%% Revision 1.4  1995/07/23  20:48:34  kehr
%% Major changes in the location-reference-processing. Full support for
%% merge-to and separate-mixed--rules. The whole processing of
%% location-refernces is more structured now and can be easier maintained.
%%
%% Revision 1.3  1995/07/10  23:26:58  kehr
%% Corrected bugs that caused location-class-matching to fail. Also
%% discovered some bugs in matching under certain circumstances, I hadn't
%% tested so far.
%%
%% Revision 1.2  1995/07/10  00:58:17  kehr
%% Completed noweb-support. Current version must be debugged to correct
%% some minor errors.
%%
%% Revision 1.1  1995/07/09  18:14:28  kehr
%% Initial checkin.
%%
