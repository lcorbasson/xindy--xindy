%%
%% This file is part of the `makeindex4'-project at the
%% Technical University Darmstadt, Computer Science Department
%% WG System Programming, Germany.
%%
%% This source is entirely written in the `noweb' literate programming
%% system.
%%
%% History at end
%%
%% Module: Markup
%%
%%
\RCS $Id$%
\RCS $Author$%
\RCS $Revision$%
\RCS $RCSfile$%
\RCS $State$%
\RCS $Date$%
%
\ModuleTitle{}


\section{Module \sans{Markup}}

\subsection{Introduction}

The final step in generating an index is the output-tagging. The
indextree needs to be traversed in an suitable way and every node ist
written to an output-stream mixed with tagging-information. The
smallest entity we consider are layers of the indexkey and of
location-references. We therefore must be able to specify the
tagging-process for every node that appears in the index.

Our approach is to specify a markup for every layer of a defined
location-class and the layers of the keywords. A set of parameters
need to be defined. We prefer the idea of make ist possible to
surround an index entity with a \emph{pre}- and a
\emph{post-specification}.


\subsection{Abstract Specification}


\subsubsection{Definition}



\subsubsection{Operation}



\subsection{Concrete Specification}

\subsubsection{Class \sans{markup}}

This serves as base-class for the classes [[locref-layer-markup]] and
[[keyword-layer-markup]].

<<class markup>>=
(defclass markup ()
    ((force-print :reader get-force-print :initarg :force-print)
     (pre-node    :reader get-pre-node    :initarg :pre-node)
     (post-node   :reader get-post-node   :initarg :post-node)
     (pre-layer   :reader get-pre-layer   :initarg :pre-layer)
     (post-layer  :reader get-post-layer  :initarg :post-layer)))
@ %def markup

<<class markup>>=
(defgeneric markup-object (object markup context env-stack))
@

\subsubsection{Class \sans{locref-layer-markup}}

<<class locref-layer-markup>>=
(defclass locref-layer-markup (markup)
    ((optional-post-layer :reader  get-optional-post-layer
                          :initarg    :optional-post-layer)
     (optional-range      :reader  get-optional-range
                          :initarg    :optional-range)))

(defun make-locref-layer-markup
    (&key (force-print 'nil)
          (pre-node  "") (post-node  "")
          (pre-layer "") (post-layer "")
          (optional-post-layer "")
          (optional-range ""))
  (make-instance 'locref-layer-markup
                 :force-print force-print
                 :pre-node  pre-node  :post-node  post-node
                 :pre-layer pre-layer :post-layer post-layer
                 :optional-post-layer optional-post-layer
                 :optional-range optional-range))

(defmethod show ((markup locref-layer-markup))
  (format t "{force-print `~A'," (if (null (get-pre-node markup)) "no" "yes"))
  (format t "pre-node `~A'," (get-pre-node markup))
  (format t "post-node `~A'," (get-post-node markup))
  (format t "pre-layer `~A'," (get-pre-layer markup))
  (format t "post-layer `~A'," (get-post-layer markup))
  (format t "optional-post-layer `~A'," (get-optional-post-layer markup))
  (format t "optional-range `~A'}" (get-optional-range markup)))
@

\subsubsection{Class \sans{keyword-layer-markup}}

For keywords we introduce a new slot named [[repetition-symbol]]. Its
semantics is as follows. Usually if [[force-print]] is set to [[t]]
this layer is printed in every case, even it weren't neccessary,
because the context already printed it. If [[repetition-symbol]] is
set we print it instead of the given context.

<<class keyword-layer-markup>>=
(defclass keyword-layer-markup (markup)
    ((repetition-symbol :reader get-repetition-symbol
                        :initarg :repetition-symbol)))
@

We use [[&allow-other-keys]] to pass colon-specifiers from calling
functions like [[keyword-markup]] that takes the additional specifier
[[:indexclass]] which should be ignored here.

<<class keyword-layer-markup>>=
(defun make-keyword-layer-markup
    (&key (force-print       'nil)
          (repetition-symbol 'nil)
          (pre-node  "") (post-node  "")
          (pre-layer "") (post-layer "")
     &allow-other-keys)
  (make-instance 'keyword-layer-markup
                 :force-print force-print
                 :repetition-symbol repetition-symbol
                 :pre-node  pre-node  :post-node  post-node
                 :pre-layer pre-layer :post-layer post-layer))

(defmethod show ((markup keyword-layer-markup))
  (format t "{force-print `~A'," (if (null (get-pre-node markup)) "no" "yes"))
  (format t "pre-node `~A'," (get-pre-node markup))
  (format t "post-node `~A'," (get-post-node markup))
  (format t "pre-layer `~A'," (get-pre-layer markup))
  (format t "post-layer `~A'," (get-post-layer markup)))
@


This function marks string [[layer-str]] with the given [[markup]]. It
returns its owm environment-closing string. As a side effect the
markup is printed via [[mprint]]-calls.

<<markup>>=
(defun markup-keyword-layer (layer-str markup had-context?)
  (mprint (get-pre-node markup))
  (mprint (get-pre-layer markup))
  (if (and had-context? (get-repetition-symbol markup))
      (mprint (get-repetition-symbol markup))
    (mprint layer-str))
  (mprint (get-post-layer markup))
  (get-post-node markup))
@

This function closes all environments stored in [[env-stack]] until
the stack has length [[stack-len]]. The default-value is to close all
environments. Return-value is the resulting stack after popping the
environments.

<<markup>>=
(defun close-environments (env-stack &optional (stack-len 0))
  (when (> (length env-stack) stack-len)
    (loop (mprint (pop env-stack))
          (when (<= (length env-stack) stack-len)
            (return)))
    env-stack))
@

<<markup methods>>=
(defgeneric mprint (object))

(defmethod mprint ((str string))
  (format *standard-output* str))
@

<<*>>=
(provide 'markup)
(use-package 'clos)

<<class markup>>
<<class locref-layer-markup>>
<<class keyword-layer-markup>>
<<markup methods>>
<<markup>>
@

%% Local Variables:
%% mode: latex
%% TeX-master: t
%% End:
%%
%% $Log$
%% Revision 1.1  1995/10/16 19:23:09  kehr
%% Initial source checkin.
%%
%% Revision 1.4  1995/07/27  23:59:05  kehr
%% Added support for keword-markup.
%%
%% Revision 1.3  1995/07/24  16:33:45  kehr
%% Added subgrouping of location-references with the same ordnum. Now
%% I'll start to join ranges.
%%
%% Revision 1.2  1995/07/23  14:14:10  kehr
%% Added support for merge-to--rule. Now works and creates
%% virtual-attributes as expected.
%%
%% Revision 1.1  1995/07/15  20:50:24  kehr
%% Added markup-support for location-references, sorting of indexentries
%% and separation of location-reference-lists into location-class
%% subgroups.
%%
