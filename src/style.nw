;;; $Id$
;;;----------------------------------------------------------------------

;;;
;;; `style'
;;;
;;; (history at end)


<<*>>=
(load "xindy")
@

Hier wird ein neuer Komponententyp definiert:

<<*>>=
(basetype "Part" '("Chapter" "Appendix" "Glossar"))
@

Hier folgt die Definition einiger Lokationsklassen fester Struktur.
Varklassen sind noch nicht implementiert.

<<*>>=
(compose-location-class
 "Part"
 (list
  (compose-basetype  "Part")
  (compose-separator "-")
  (compose-basetype  "Arabic Numbers")))

(compose-location-class
 "Section"
 (list
  (compose-basetype  "Arabic Numbers")
  (compose-separator ".")
  (compose-basetype  "Arabic Numbers")
  (compose-separator ".")
  (compose-basetype  "Arabic Numbers")))

;(match-locclass-by-string "Chapter"     (find-location-class "Part"))
;(match-locclass-by-string "Appendix-"   (find-location-class "Part"))
;(match-locclass-by-string "Glossar-123" (find-location-class "Part"))
;(match-locclass-by-string "1.2"         (find-location-class "Part"))

;(match-locclass-by-string "1"      (find-location-class "Section"))
;(match-locclass-by-string "1."     (find-location-class "Section"))
;(match-locclass-by-string "2.3"    (find-location-class "Section"))
;(match-locclass-by-string "2.3."   (find-location-class "Section"))
;(match-locclass-by-string "2.3.4"  (find-location-class "Section"))
;(match-locclass-by-string "2.3.4." (find-location-class "Section"))
;(match-locclass-by-string ""       (find-location-class "Section"))
;(match-locclass-by-string "    "   (find-location-class "Section"))


;(defun test-forall (idxcls loccls arglist)
;  (print (get-name idxcls))
;  (print (get-name loccls))
;  (print arglist))

;(forall-location-classes #'test-forall 1 2 3)

;;(idxent "1.2"       '("Trees"))
;;(idxent "1.3"       '("Trees"))
;;(idxent "1.4"       '("Trees"))
;;(idxent "2.1"       '("Trees"))
;;(idxent "2.2"       '("Trees"))
;;(idxent "1.3"       '("Trees") "bold")
;;(idxent "1.4"       '("Trees") "bold")
;;(idxent "2.1"       '("Trees") "bold")
;;(idxent "2.2"       '("Trees") "italic")
;;(idxent "Chapter-1" '("Trees"))
;;(idxent "Chapter-3" '("Trees"))
;;(idxent "Chapter-4" '("Trees"))
;;(idxent "Chapter-5" '("Trees") "italic")
;;(idxent "Chapter-6" '("Trees"))
;;(idxent "3.1"       '("Trees") "italic")
;;(idxent "3.2"       '("Trees"))

;(separated-mixed '(("bold" "default") "italic"))
;(merge-to "bold" "default")
@

Hier folgt die Definition einiger Indexeintr"age:

<<*>>=
(idxent "1.1.0"       '("Trees" "AVL"))

(idxent "1.1.2"       '("Trees"))
(idxent "1.1.3"       '("Trees"))
(idxent "1.1.4"       '("Trees"))
(idxent "1.1.5"       '("Trees"))

(idxent "2.1.1"       '("Trees" "binary"))
(idxent "2.1.2"       '("Trees" "binary"))
(idxent "2.1.2"       '("Trees" "binary" "balanced"))

(separated-mixed '("default"))

(setf (get-keyword-markup (find-indexclass *active-idxcls-name*)) '())
@

Das Markup f"ur die drei Layer der Stichw"orter der aktiven
Indexklasse ist hier definiert. Das Markup der Lokationsreferenzen ist
noch nicht implementiert.

<<*>>=
(keyword-markup :pre-node "~%"
                ;;:post-node "1)"
                ;; :repetition-symbol "--"
                ;; :force-print t
                :pre-layer "\\textbf{" :post-layer "}")
(keyword-markup :pre-node "~%  "
                ;;:post-node "2)"
                :force-print t
                :pre-layer "\\emph{" :post-layer "}")
(keyword-markup :pre-node ", "
                ;;:post-node "3)"
                :pre-layer "\\textsf{" :post-layer "}")
@

Hier der Beispielaufruf mit Markup:

<<*>>=
(process-index)
@


%%
%% $Log$
%% Revision 1.4  1995/12/07 13:21:47  kehr
%% Dies ist das Projekt zum Zeitpunkt der Abgabe.
%%
%% Revision 1.3  1995/11/21  14:55:20  kehr
%% Added support for DejaGnu-Framework.
%%
%% Revision 1.2  1995/11/08  16:18:21  kehr
%% Minor modifications.
%%
%% Revision 1.1  1995/10/16  19:23:10  kehr
%% Initial source checkin.
%%
%% Revision 1.10  1995/07/28  10:41:20  kehr
%% Added simple markup for location-references and ranges. Currently
%% exists no support for differen layer-markup. A location-reference is
%% always printed as a whole.
%%
%% Revision 1.9  1995/07/27  23:59:07  kehr
%% Added support for keword-markup.
%%
%% Revision 1.8  1995/07/27  14:36:46  kehr
%% Added support for joining of locref-separated-groups.
%%
%% Revision 1.7  1995/07/24  16:33:46  kehr
%% Added subgrouping of location-references with the same ordnum. Now
%% I'll start to join ranges.
%%
%% Revision 1.6  1995/07/23  20:48:37  kehr
%% Major changes in the location-reference-processing. Full support for
%% merge-to and separate-mixed--rules. The whole processing of
%% location-refernces is more structured now and can be easier maintained.
%%
%% Revision 1.5  1995/07/23  14:14:12  kehr
%% Added support for merge-to--rule. Now works and creates
%% virtual-attributes as expected.
%%
%% Revision 1.4  1995/07/15  20:50:26  kehr
%% Added markup-support for location-references, sorting of indexentries
%% and separation of location-reference-lists into location-class
%% subgroups.
%%
%% Revision 1.3  1995/07/11  23:33:10  kehr
%% Added indexclass-structure as assoc-list. Completed
%% indexentry-inserting with merge-insert-feature. Now we are nearly
%% finished with the data-setup and can start to handle the
%% location-references.
%%
%% Revision 1.2  1995/07/11  15:14:18  kehr
%% Today I finished the definition of indexentries. They now will be
%% inserted into the index when a appropriate location-class was finished.
%%
%% Revision 1.1  1995/07/11  00:47:44  kehr
%% Now starting to work on a full index. Detection of indexclasses is
%% nearly finished an we can start to define indexentries to make that
%% thing work.
%%
