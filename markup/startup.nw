%%
%% This file is part of the `xindy'-project at the
%% Technical University Darmstadt, Computer Science Department
%% WG System Programming, Germany.
%%
%% This source is entirely written in the `noweb' literate programming
%% system.
%%
%% History at end
%%
%% Module:    markup
%% Submodule: startup
%%
%%
\RCS $Id$%
\RCS $Author$%
\RCS $Revision$%
\RCS $RCSfile$%
\RCS $State$%
\RCS $Date$%
%
\ModuleTitle{}


\section{Submodule \module{startup}}

This submodule contains some startup-code.

\subsubsection{Startup}

The following constants help to identify the \xindy-version. Variable
[[*xindy-platform*]] is a string indicating the platform on which
xindy runs. Its value will be set anew when dumping xindy on a
particular platform.

<<Global definitions>>=
(defparameter *xindy-version*  "unknown")
(defparameter *xindy-bin-version*  "unknown")
(defparameter *xindy-platform* "unknown")
@ %def *xindy-platform* *xindy-version*

<<Startup functions>>=
(defun issue-startup-message ()
  (info "~&This is xindy 1.0b (~A).~%" *xindy-platform*))

(defun startup (&key idxstyle rawindex output logfile
                     show-version markup-trace (trace-level 0))
  (issue-startup-message)
  (when show-version (exit))
  (when markup-trace (setq *markup-verbose-mode* t))
  #+:HANDLER
  (handler-case
      (do-startup idxstyle rawindex output logfile trace-level)
    (error
	(condition)
      (oops* (simple-condition-format-string    condition)
	     (simple-condition-format-arguments condition))
      (error-exit)))
  #-:HANDLER
  (do-startup idxstyle rawindex output logfile trace-level))
@ %def issue-startup-message startup

<<Startup functions>>=
(defun do-startup (idxstyle raw-index output logfile trace-level)
  (set-searchpath-by-environment)
  (when logfile
    (info "~&Opening logfile ~S " logfile)
    (handler-case
        (setq *logging-stream* (open logfile
                                     :direction :output
                                     :if-does-not-exist :create))
      (error ()
             (oops "Opening logfile ~S failed!" logfile)
             (error-exit)))
    (info "(done)~%")
    ;; Set necessary flags...
    (setq *logging-on* t)
    (case trace-level
      (0)
      (1 (setq *mappings-trace* t))
      (2 (setq *mappings-trace* t) (setq *locref-trace* t))
      (3 (setq *mappings-trace* t) (setq *locref-trace* t))
      (t (error "Invalid :trace-level ~S !" trace-level)))
    #+:ORDRULES (when *mappings-trace*
		  (setq ordrules::*message-logging* 1))

    (multiple-value-bind (sec min hour day mon year)
        (get-decoded-time)
      (gol t ";; This logfile was generated automatically by `xindy'~%")
      (gol t ";; at ~2,'0D.~2,'0D.~4,'0D  ~2,'0D:~2,'0D:~2,'0D~%"
           day mon year hour min sec))
    (gol t ";; Indexstyle: ~S, Rawindex: ~S, Output: ~S~%~%"
         idxstyle raw-index output)
    )

  (info "~&Reading indexstyle...~%")
  (let ((*readtable* idxstyle:*indexstyle-readtable*))
    (idxstyle:do-require idxstyle))
  (info "~&Finished reading indexstyle.")
  (info "~&Finalizing indexstyle... ")
  (idxstyle:make-ready idxstyle:*indexstyle*)
  (info "(done)~%~%")

  (info "~&Reading raw-index ~S..." raw-index)
  (load raw-index :verbose nil)
  (info "~&Finished reading raw-index.~%~%")

  (handler-case
      (setq *markup-output-stream*
            (open output
                  :direction :output
                  :if-does-not-exist :create))
    (error ()
           (oops "Opening file ~S failed!" output)
           (error-exit)))

  (info "~&Processing index...")
  (index:process-index index:*index*)
  (info "~&Finished processing index.~%~%")

  (info "~&Writing markup...")
  (markup:do-markup-index index:*index*)
  (info "~%Markup written into file ~S.~%" output))
@ %def do-startup

<<Export-list of submodule \module{startup}>>=
(export '(startup *xindy-version* *xindy-platform*))
@

<<Startup functions>>=
(defun set-searchpath-by-environment ()
  (let ((sp (system::getenv "XINDY_SEARCHPATH")))
    (when sp (idxstyle:set-searchpath-by-string sp))))
@ %def set-searchpath-by-environment


\subsubsection{The BREAK-driver}

The Break-driver is necessary to make [[clisp]] handle user-interrupts
via \fbox{\small CRTL-C} correctly. The installed handler calls the
break-driver (which is [[SYSTEM::BREAK-LOOP]] by default---\emph{see}
\texttt{user1.lsp} in the [[clisp]]-source) when a user interrupt
happens. This handler is called with the first argument set to [[T]]
indicating, that the handler may continue.  We replace this handler
with a new one that simply exits. Now a user break will result in a
program stop and not in an annoying habit of simple ignoring users
commands ;-)

We use the feature [[:BREAK-DRIVER]] to decide if the break-driver is
to be installed. The lambda-list of the break-driver was borrowed from
its counterpart [[break-loop]] as mentioned above. If the argument
[[condition]] is supplied we do format the message before quitting.
The old version which did not handle this case is still left here.

The handler must be installed when dumping \xindy.

<<The BREAK-driver>>=
#+:BREAK-DRIVER
(fmakunbound '*break-driver*)

#+:BREAK-DRIVER
(defun *break-driver* (continuable
                       &optional (condition nil) (print-it nil)
                       &aux (may-continue
                             (or continuable
                                 (and condition
                                      (find-restart 'continue condition))
                                 ) )
                       (interactive-p (interactive-stream-p *debug-io*))
                       (commandsr '())
                       )
  (declare (ignore may-continue interactive-p commandsr))
  ;; This when-clause is from Bruno Haible.
  (when (and condition print-it)
    (terpri *error-output*)
    (write-string "*** - " *error-output*)
    (system::print-condition condition *error-output*))
  (format *ERROR-OUTPUT* "~&Bye.")
  (error-exit))

#+:BREAK-DRIVER-OLD
(defun *break-driver* (continuable &rest rest)
  (declare (ignore continuable rest))
  (format *ERROR-OUTPUT* "~&Bye.")
  (exit))

#+:BREAK-DRIVER
(export '*break-driver*)
@ %def  *break-driver*


\subsubsection{The submodule root}

<<Submodule \module{startup}>>=
;; $Id$

(lisp:in-package  "XINDY")
(lisp:use-package "BASE")
(lisp:use-package "MARKUP")
(lisp:use-package "CLOS")
(lisp:import markup:*markup-user-interface-definitions*)

(eval-when (compile load eval)
  (pushnew :HANDLER      *features*))
(eval-when (compile load eval)
  (pushnew :BREAK-DRIVER *features*))

<<Global definitions>>
<<Startup functions>>
<<The BREAK-driver>>

<<Export-list of submodule \module{startup}>>
@

<<RCS-Identifier>>=
("startup" . "$Id$")
@


%% $Log$
%% Revision 1.13  1997/03/03 16:00:12  kehr
%% Added new markup command `markup-locref-layer'.
%%
%% Revision 1.12  1997/02/06 15:23:04  kehr
%% Removed the copyright notice during startup.
%%
%% Revision 1.11  1997/01/23 21:36:05  kehr
%% Introduced the :trace-level interface. Depending on this flag other
%% global flags are set that control the different logging-schemes.
%%
%% Revision 1.10  1997/01/22 16:49:12  kehr
%% Minor changes.
%%
%% Revision 1.9  1997/01/17 16:43:09  kehr
%% Several changes for new version 1.1.
%%
%% Revision 1.8  1996/08/02  14:12:02  kehr
%% Corrected bug when printing the percentage-list.
%%
%% Revision 1.7  1996/07/24  13:50:55  kehr
%% Added the *break-driver*. But this is still not working correctly.
%%
%% Revision 1.6  1996/07/22  15:55:29  kehr
%% Replaced some of the oops-macros by nraw-macros. Removed apply-oops
%% macros.
%%
%% Revision 1.5  1996/07/18  15:54:31  kehr
%% Checkin after all changes that resulted from the define-letter-group
%% modification were finished.
%%
%% Revision 1.4  1996/07/16  14:06:24  kehr
%% Checkin after all the changes to the `define-letter-group(s)' commands
%% have been made.
%%
%% Revision 1.3  1996/07/11  14:16:37  kehr
%% Complete Major checkin before changing the letter-groups.
%%
%% Revision 1.2  1996/07/03  18:41:44  kehr
%% Checkin after some modifications of the error-system and the loading of
%% indexstyle-modules have been made. Affects all modules.
%%
%% Revision 1.1  1996/06/24  09:13:20  kehr
%% Several changes in all Lisp-modules due to the new startup-module and
%% the implementation of the percentage bar appearing in the processing
%% phases.
%%
%% Revision 1.9  1996/06/03  10:01:53  kehr
%%

%% Local Variables:
%% mode: lisp
%% TeX-master: t
%% End:)
