%%
%% This file is part of the `xindy'-project at the
%% Technical University Darmstadt, Computer Science Department
%% WG System Programming, Germany.
%%
%% This source is entirely written in the `noweb' literate programming
%% system.
%%
%% History at end
%%
%% Submodule: indexentry
%%
%%
\RCS $Id$
\RCS $Author$
\RCS $Revision$
\RCS $RCSfile$
\RCS $State$
\RCS $Date$
%

\ModuleTitle{}


\section{Module \module{indexentry}}


\subsection{Introduction}

This module is responsible for the management of an indexentry. It is
one of the main modules of the whole system. An indexentry is an
object that holds the keywords of the indexentry (we currently
distinguish the \emph{main-key, merge-key, sort-key} and
\emph{print-key}), the corresponding list of location-references and
the reference to the indexclass the entry belongs to. We must be able
to process the location-references, and to markup the indexentry
during output-tagging.


\subsection{Abstract Specification}

\subsubsection{Definition}

An \term{indexentry} is a set
\begin{center}
  $\{$\emph{main-key, merge-key, sort-key, print-key, locrefs,
    indexclass}$\}$
\end{center}
with
\begin{deflistit}{indexclass}
\item [main-key] is a \tstrlist representing the main-key.
\item [merge-key] is a \tstrlist representing the merge-key.
\item [sort-key] is a \tstrlist representing the sort-key.
\item [print-key] is a \tstrlist representing the print-key.
\item [locrefs] is a list of \tlocref and contains all
  location-references that belong to this indexentry.
\item [indexclass] is a \type{indexclass}. It points to the whole
    indexclass description.
\end{deflistit}


\subsubsection{Operation}


\subsection{Concrete Specification}

\subsubsection{External interface}

The following symbols are exported:

\begin{defcls}{indexentry}{}
  Decribes indexentries.
\end{defcls}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{Class \class{indexentry}}

An indexentry consists of the following elements:

<<class \class{indexentry}>>=
(defclass indexentry ()
    ((main-key   :reader   get-main-key   :initarg :main-key)
     (merge-key  :reader   get-merge-key  :initarg :merge-key)
     (sort-key   :reader   get-sort-key   :initarg :sort-key)
     (print-key  :reader   get-print-key  :initarg :print-key)
     (locrefs    :accessor get-locrefs    :initarg :locrefs)
     (idxclass   :reader   get-idxclass   :initarg :idxclass)))

(defun make-indexentry (&key (main-key '()) (merge-key '())
                             (sort-key '()) (print-key '())
                             (locrefs '())  (idxclass nil)
                             &allow-other-keys)
  (make-instance 'indexentry :main-key main-key :merge-key merge-key
                             :sort-key sort-key :print-key print-key
                             :locrefs  locrefs  :idxclass  idxclass))
@ %def indexentry make-indexentry

<<export-list of module \module{index}>>=
(export '(indexentry make-indexentry))
@ %def indexentry make-indexentry


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\no The following function takes an indexentry and scans all possible
location-classes if the location-reference matches with them. If it
matches it creates a new indexentry with the corresponding
location-reference that was built with the matching-information. We
use the [[forall]]-construct to iterate over all location-classes and
call [[gen-indexentry-if-matched]] as the apply-function.

<<generate indexentries>>=
(defun gen-indexentries (&rest keyword-arguments
                         &key locref-str
                         &allow-other-keys)
  (forall-location-classes #'gen-indexentry-if-matched
                           locref-str keyword-arguments))
@ %def gen-indexentries

\no Remember that the applier-function of [[forall-location-classes]]
takes the three arguments indexclass, locationclass and given
parameter-list. As the parameter-list we have constructed a list whose
first element is the location-string and the rest is the given
keyword-list. They are needed for instatiaton of the
location-reference and the indexentry. Allowed keywords can be found
in the corresponding class definitions. Keywords that will explicitely
determined in this function (such as [[:layers]] and [[:ordnums]] for
the location-reference. [[:locrefs]] and [[:idxclasses]] for
indexentries) mustn't be set.

<<generate indexentries>>=
(defun gen-indexentry-if-matched (idxcls loccls keyword-arguments)
  (let ((locref-str        (car  keyword-arguments))
        (keyword-arguments (cadr keyword-arguments)))
    (multiple-value-bind (layers ordnums)
        (match-locclass-by-string locref-str loccls)
      (unless (or (endp layers) (endp ordnums))
        (let ((locref (apply #'make-location-reference
                             :layers   layers :ordnums ordnums
                             :locclass (get-name loccls)
                             keyword-arguments)))
          (add-indexentry (apply #'make-indexentry
                                 :locrefs (list locref)
                                 keyword-arguments)
                          :idxcls-name (get-name idxcls)))))))
@ %def gen-indexentry


To markup an indexentry we give as arguments the indexentry, a list of
markups for every layer (this markup is stored in the [[markup]]-slot
of the indexclass) and the [[context]] which is a list of strings. The
context is the [[print-key]] of the previous printed indexentry.

<<markup methods>>=
(defmethod markup-object ((idxent indexentry)
                          (markup-list  list)
                          (context-list list)
                          (env-stack    list))
  (let ((layer-counter 0)
        (pass-mode  'find-starting-point))
    (do ((key-list (get-print-key idxent) (cdr key-list))
         (markups  markup-list            (cdr markups))
         (contexts context-list           (cdr contexts)))
        ((or (endp key-list) (endp markups))
           (markup-object (get-locrefs idxent) '() '() '()))  ;; for now
      (if (equal pass-mode 'find-starting-point)
          (if (and (equal (car key-list) (car contexts))
                   (eql (get-force-print (car markups)) 'nil))
              (incf layer-counter)
            (progn
              (setq pass-mode 'printing-mode)
              (setq env-stack (close-environments env-stack layer-counter))
              (push (markup-keyword-layer (car key-list)
                                          (car markups)
                                          (equal (car key-list)
                                                 (car context-list)))
                    env-stack)))
        (push (markup-keyword-layer (car key-list)
                                    (car markups)
                                    (equal (car key-list)
                                           (car context-list)))
              env-stack))))
  env-stack)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{Processing an indexentry}

\subsubsection{Semi-formal description}

Processing an indexentry is one of the central parts of the system.
Since a lot of different rules parametrize this process, the
underlying algorithm must consider several topics in parallel. We
start to describe a short theoretical overview, which shall remind us
what tasks to perform and what to consider generally.

During marking up, the list of location-references an indexentry owns
must be sorted, merged into ranges and finally be tagged. We're given
a list of location-references and have to perform the following tasks
in the order below.

\newcommand{\Real}{\textsf{normal}\xspace}
\newcommand{\Virt}{\textsf{virtual}\xspace}

Before starting with the process' description we introduce some
slot-functions (which are both readable and setable) according to the
slots that appear in the description of class
\class{location-refererence} extended by some new slots:
\begin{deflist}{XXXXXX}
  \item [\fcatattr{$l$}] returns the category-attribute of $l$.
  \item [\floccls{$l$}] returns the location-class $l$ belongs to.
  \item [\fordnum{$l$}] returns the list of ordnums of $l$.
  \item [\fvcatattr{$l$}] returns the virtual category-attribute of
    $l$. Initially this value is empty.
  \item [\fstat{$l$}] returns the state of $l$ with
    $\fstat{l}\in\{\Real,\Virt\}$. This slot is initially set to
    \Real.
  \item [\fparent{$l$}] returns a reference to the location-reference
    $l$ was generated from. This value is initially set to \fnil.
\end{deflist}
Additionally we introduce an operator $[\ldots]$ which is used in
the form
\[k := l\,[s_1:=v_1,\ldots,s_n:=v_n]\]
with $k,l$ location-references and $s_i$~slot, $v_i$~new slot-value.
With this notation we describe that $k$ inherits all slot-values from
$l$ except those mentioned in the $[\ldots]$-list. This operator is
called \term{inheritance-operator}.\footnote{The idea is simply
  borrowed from similar notations which are used with variable
  substitutions in denotational semantics and unification.}

\paragraph{Initally accessible data}

\no We start with an initial set $R$ of location-references such that
\[\forall l,k\in R: l\not=k\Rightarrow\fcatattr{l}\not=\fcatattr{k}\vee
\fordnum{l}\not=\fordnum{k}\vee \floccls{l}\not=\floccls{k}.\] So we
can assume that there exist no \term{duplicates} in $R$.


\paragraph{Separating into location-classes}

Divide $R$ into equivalence-classes of location-references based on
the location-classes. We receive a set of disjoint sets of
location-references $R:=\{L_1,\ldots,\L_n\}$, where in each subset
$L_i$ for each pair $l,k\in{}L_i$, $i=1\ldots{}n$ of
location-references holds \func{loccls}($l$)=\func{loccls}($k$).
Additionally holds $\forall x\in~L_j,\forall y\in~L_k,
j\not=k\Rightarrow\func{loccls}(j)\not=\func{loccls}(k)$.

\bigskip\noindent Process the following steps for each subset $L_i$
separately:



\newcommand{\Sid}{\irule{substitute-if-double}\xspace}
\newcommand{\sid}{\irule{subs-if-dbl}\xspace}

\paragraph{Apply all \Sid-rules}
\label{sec:subs-if-dbl}

This application operates on a set $L_i$ of location-references. All
\Sid-rules define a relation on the set $C$ of category-attributes
(ca). The relation is notated in the form `\Sid~$x$~$y$' or
abbreviated `\sid~$x$~$y$'.

There are two ways the user can specify these relations:
\begin{enumerate}
\item By explictly defining a set $C_U$ of rules of the form
  `\sid~$x$~$y$' with $x,y\in C$.
\item By defining virtual category-attributes (vca's). E.g.\@the
  definition of a vca $v:=(x~y~z)$ composed of the ca's $x,y,z$
  defines implicitely `\sid~$x$~$y$' and `\sid~$y$~$z$'. Tis set of
  rules is denoted $C_V$.
\end{enumerate}
%%
The question now arises if we should deduce that also implicitely
holds `\sid~$x$~$z$'? This means if we should calculate the
\term{transitive hull} on our relation. In a simple case like this the
user can add the remaining rule by her-/himself, but in more complex
cases we can calculate the transivie hull for him without the danger
of making any mistakes. We think that the user may expect a behaviour
that says `replace $z$ because we already have it in the form of $x$.'
and therefore define the transitive hull of the defined vca's. This is
a design decision but we will add a user-definable hook to change this
behaviour by not calculating the transitive hull. We denote the
transitive-hull operator with an appended star ($*$).  The resulting
relation $C_R$ can now be calculated in several ways:
\begin{enumerate}
\item $C_R:=C_U\cup C_V$$*$, defined as the default.
\item $C_R:=C_U$$*\cup C_V$$*$, if the user wants the transitive
  hull also be generated over his specification.
\item $C_R:=(C_U\cup C_V)*$, if the user wants a global transitive
  hull generation.
\end{enumerate}
%%
We conclude that we probably need three separate hooks for the
transitive-hull-calculation of $C_U,C_V$ and $C_U\cup C_V$. The user
is then free to do whatever (more or less) she/he wants.

Additionally we could include a check to see if some of the relations
are \term{refexive} what actually doesn't make any sense, since no
location-reference wants to substitute itself.

Until now we didn't define what \term{substitution} actually means.
There are two ways.
\begin{enumerate}
\item To substitute means to \term{remove} in a way that the
  substituted location-reference will be removed.
\item It means to set the state of the substituted location-reference
  to \term{virtual} to allow it to be joined into a range.
\end{enumerate}
Both ways make sense so we need another hook to specify in what sense
to substitute.

\medskip

Informally we can describe this process as follows: $\forall l\in L_i$
test, if there exists $k\in L_i$ with $k\not=l\wedge\fstat{k}=\Real
\wedge\fordnum{k}=\fordnum{l}\wedge \exists
r=`\sid~\fcatattr{k}~\fcatattr{l}'\in C_R$ in which case we set
\fstat{$l$} to \Virt or remove $l$.

Actually we reset $l$'s state to \Virt means to move it from the set
of \emph{real} location-references into the set of \emph{virtual}
location-references. This happens only in the case that there really
exists a location-reference $k$ which is \Real.


\paragraph{Apply all \irule{merge-to}- and \irule{drop-if-merged}-rules}

Initialize the set of new location-references $L_i^+:=\{\}$. For all
$l\in{}L_i$ (virtual or not) if exists a rule
`$\irule{merge-to}~\fcatattr{l}~x$' then $L_i^+:=L_i^+\cup{}l_+$ with
\[l_+:=l\,[\Fstat{}:=\Virt,\Fcatattr{}:=x].\]
or if additionally holds `\irule{drop-if-merged}~\fcatattr{l}~x'
\[l_+:=l\,[\Fstat{}:=\Virt,\Fcatattr{}:=x,\Fparent:=\fparent{l}].\]

\noindent The basic idea is to generate new location-references that
are equal to their parents but with \Fstat{} set to \Virt and if there
exists an applicable \irule{drop-if-merged}-rule additionally
\Fparent{} holds a reference to the parent location-reference, since
we must be able to actually \emph{drop} the parent, if necessary.



\paragraph{Cleaning up}

We do the following clean-up steps:
\begin{itemize}
\item After applying the last steps we first need to union $L_i$ and
  $L^+_i$ to receive the extended set $L_i:=L_i\cup L_i^+$.

\item Then we need to remove all duplicate location-references (there
  exist only virtual ones) from $L_i$ (they may have been created by
  appling several \irule{merge-to}-rules).

\item Then we should remove all virtual location-references that are
  \term{shadowed} by a normal one. These lref's are the ones for which
  holds
  \[\begin{array}{rl}
    l\in L_i~\fstat{l}=\Virt\wedge\exists k:&\fstat{k}=\Real\wedge%%
    \\&\fcatattr{k}=\fcatattr{l}\wedge\fordnum{k}=\fordnum{k}.
  \end{array}\]
\end{itemize}
After this clean-up the following holds:%
\[\forall l,k\in L_i:
l\not=k\Rightarrow\fcatattr{l}\not=\fcatattr{k}\vee
\fordnum{l}\not=\fordnum{k}.\]


\paragraph{Generate virtual catattrs}

The virtual category-attributes (vca's) are described by a injective
function $\phi$ from the set $C$ of category-attributes to the set $V$
of virtual ca's. Since $\phi$ is somehow we do $\forall l\in L_i:
\fvcatattr{l}:=\phi(\fcatattr{l})$.

\smallskip

\noindent Divide $L_i$ into equivalence-classes $K_1,\ldots,K_m$ that
for each pair $l,k\in{}K_j$ holds: $\fvcatattr{l}=\fvcatattr{k}$.
Additionally holds $\forall x\in K_j,\forall y\in
K_k,j\not=k\Rightarrow\fvcatattr{j}\not=\fvcatattr{k}$.




\paragraph{Building ranges in all $K_j$}

This is separated into two stages:
  \begin{enumerate}
  \item Process all $K_{\phi(j)}$ for which exists a
    `$\irule{merge-to}~x~j$'-rule.

    Build ranges (will be described later) and for all
    location-references $l$ that will be merged into a range check, if
    condition $\fparent{l}\not=\fnil{}$ is true in which case
    $\fstat{\fparent{l}}:=\Virt$ achieves that the state of $l$'s
    parent is set to virtual.

  \item Continue to process all $K_{\phi(j)}$ for which does not exist
    a `$\irule{merge-to}~x~j$'-rule.
  \end{enumerate}
  These steps must be done in the described order because the
  \irule{drop-if-merged}-rule.


\subsubsection{Building of ranges}

\subsubsection{Relations and their transitive hull}

We already mentioned in \secref{sec:subs-if-dbl} that we need a
transitive hull calculation base on the category-attibutes.  Because
we calculate this only a few times with usually only a small number of
elements we don't need to worry about an effective implementation.
More interesting is a fast access to prove if two elements are in
relation.

The usual calculation-algorithm needs to know the whole set
$V_i=\{v_{i,1},\ldots,v_{i,n}\}$ of neighbours of node $v_i$ for which
holds $\forall v'\in V_i: v_i\rightarrow v'$. So we need a
representation that is based on sets. We use association-lists with
nodes as key and a list of neighbours as elements, \eg
\begin{center}
  ( (\emph{node$_1$} . (\emph{neighbours of node$_1$})) \ldots
  (\emph{node$_n$}. ($n_i,n_j,\ldots,n_l$)) ).
\end{center}
%%
\begin{note}
  It is absolutely necessary that nodes with no neighbours are
  represented in the relation, too. So a node $v$ with no successors
  is represented in the relation as a \texttt{(acons $v$ $\{\}$)}.
  Otherwise the algorithm will produce wrong results.
\end{note}
The following destructive function [[transitive-hull]] needs a weel-formed
relation of the specified structure and returns the same modified
relation which represents the transitive hull of the given relation.

<<Transitive hull algorithm>>=
(defun transitive-hull (relation)
  (mapc #'(lambda (j)
            (mapc #'(lambda (i)
                      (when (member (car j) (cdr i))
                        (mapc #'(lambda (k)
                                  (when (member (car k) (cdr j))
                                    (rplacd (last i)
                                            (list (car k)))))
                              relation)))
                  relation))
        relation))
@ %def transitive-hull

\no The relation is calculated once and used heavily afterwards. The
only operation we need later is to check if $x$ is in relation to $y$
or not. Therefore we transform the represenation now into a faster
hash-table representation.

The representation of the hashed elements is a pair ($x~y$) with $x,y$
category-attributes. We simply traverse the relation and for each pair
($x~y$) we [[cons]] both elements and use the result of the key for
the hash-table. To accomplish an exact test we use keyword %%
[[:test #'equal]] for the comparison function. (Another idea would be
to use [[sxhash]] and use [[#'eql]] for hashing if we should need a
speed-up)

<<Transform relation into hash-table>>=
(defun relation-to-hash (relation)
  (let ((ht (make-hash-table :test #'equal)))
    (mapc #'(lambda (node)
              (mapc #'(lambda (succ-node)
                        (let ((elt (cons (car node) succ-node)))
                          (setf (gethash elt ht) t)))
                    (cdr node)))
          relation)
    ht))
@ %def relation-to-hash

\no Finally we define a predicate [[relation-p]] that tests if $x$ is
in relation with $y$ in relation [[rel]].

<<Test for relation>>=
(defun relation-p (x y rel)
  (gethash (cons x y) rel))
@ %def relation-p

\no The whole source is

<<Relations and transitive hull>>=
<<Transitive hull algorithm>>
<<Transform relation into hash-table>>
<<Test for relation>>
@

<<test>>=
(defun init ()
  (setq a 'a)
  (setq b 'b)
  (setq c 'c)
  (setq d 'd)
  (setq e 'e)
  (setq f 'f)

  (setq z 'z)
  (setq y 'y)
  (setq x 'x)

  (setq rel '())
  (setq rel (acons z '() rel))
  (setq rel (acons y (list z) rel))
  (setq rel (acons x (list y) rel))

  (setq rel (acons f '() rel))
  (setq rel (acons e (list f) rel))
  (setq rel (acons d (list e) rel))
  (setq rel (acons c (list d) rel))
  (setq rel (acons b (list c) rel))
  (setq rel (acons a (list b) rel))

  (transitive-hull rel)
)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newpage
\subsubsection{OLD}

Processing an indexentry is mainly a work that relates to the
location-references an indexentry contains. First of all we need to
apply the defined indexstyle-rules. This may create virtual attributes
and change order- and successor-neighbourship and may even remove some
entries because of substitution-rules. Afterwards the indexentries
will be sorted.  Then we step over all references and compare
neighbours to their successor-relationship. If it is possible, we
build ranges by joining two references. Afterwards we need to step
over again to remove some location-references if some appropriate
rules were specified.

The process itself is more or less a operation of refinement on the
underlying structure. For example, we subgroup the list of
location-references into location-class-groups. Later we need to
subgroup the location-class-groups into separated/mixed--groups, \etc.
This process continues until we reach ranges of location-references.

The idea is to define a generally usable function [[split-list]] that
may be used to subgroup and sort a list with a [[split-function]] and
a [[sort-function]]. Additionally we define a conversion-function
[[convert-sublists-to-fixed-group]] that can be used to turn the
generated sublists into \emph{group-objects}. A more flexible function
[[convert-sublists-to-specialized-groups]] is used to create instances
of different classes of group-objects. The idea of group-objects is to
easily bind action-methods with them to simplify overall work.

At first I started with working on highly nested lists in which every
sublist has a special meaning. Because I must concentrate on managing
those lists more than giving new features the idea of groups was born.
It is also easier to maintain for future extensions.

Now let's start with the definition of the location-class-groups.


\subsubsection{Location-reference groups}

Groups are used to simplify processing the location-references. We
define the base-class [[locref-groups]] which can be used to define
other subclasses and binding methods to it. The \emph{elements} of a
group a named [[members]]. We define a generic function [[do-group]]
that specifies the work that needs to be done on every kind of group.
Marco [[show-group]] is a wrapper to define [[show]]--methods for all
of those classes. It is meant as an abbreviation for defining lots of
similiar methods.

<<class locref-group>>=
(defclass locref-group ()
    ((members :accessor get-members :initarg :members)))

(defun make-locref-group (group-class members)
  (make-instance group-class :members members))

(defgeneric do-group (group-object))
@

The markup of location-reference-groups is generally just a forwarding
to the markup of its members. We can define the markup of objects just
with one method applicable for all classes except the
[[locref-same-ordnum-group]].

<<markup methods>>=
(defmethod markup-object ((locref-grp locref-group)
                          (dummy-markup-list  list)
                          (context-list list)
                          (dummy-env-stack    list))
  (declare (ignore dummy-makup-list dummy-env-stack))
  (dolist (member (get-members locref-grp))
    (markup-object member '() '(", ") '())))
@

Here we define a function that is used to specify the pretty-print of
locref-groups. Function [[pprint-locref-group]] prints [[grp]] on
stream [[s]]. It uses [[name]] to add the name of the group into the
pretty-print-stream. Function [[set-pprint-locref-group-dispatch]] is
needed to add the class-types into the dispatch-table for the
pretty-printer.

<<pretty-print>>=
(defun pprint-locref-group (s grp name)
  (pprint-logical-block
   (s nil :prefix "{" :suffix "}")
   (write-string name s)
   (pprint-indent :block 2 s)
   (pprint-newline :mandatory s)
   (pprint-fill s (get-members grp) nil)
   (pprint-indent :block -1 s)
   (pprint-newline :mandatory s)))

(defun set-pprint-locref-group-dispatch (class name &optional (rank 0))
  (set-pprint-dispatch class
                       #'(lambda (s grp)
                           (pprint-locref-group s grp name))
                       rank))
@

When adding types is is absolutely necessary to add a rank into the
dispatch-table, that describes the inheritance-relations between the
classes. For examplem class [[locref-group]] is base-class of all
other locref-groups. Therefore the other classes need a higher rank to
explicitely define a precedence during the pretty-printer-dispatching
(This took me quite a while to work it out\ldots uff!). As can be seen
the given ranks (third argument of
[[set-pprint-locref-group-dispatch]]) describe exactly the topological
sort of the class-relationships.

This section is placed here before the definition of all classes.

<<pretty-print>>=
(set-pprint-locref-group-dispatch 'locref-group
                                  "locref-group"               0)
(set-pprint-locref-group-dispatch 'locref-list-group
                                  "locref-list-group"          1)
(set-pprint-locref-group-dispatch 'locref-class-group
                                  "locref-class-group"         1)
(set-pprint-locref-group-dispatch 'locref-sep-mixed-group
                                  "locref-sep-mixed-group"     1)
(set-pprint-locref-group-dispatch 'locref-separated-group
                                  "locref-separated-group"     2)
(set-pprint-locref-group-dispatch 'locref-mixed-group
                                  "locref-mixed-group"         2)
(set-pprint-locref-group-dispatch 'locref-same-ordnum-group
                                  "locref-same-ordnum-group"   1)
@

\subsubsection{Splitting into sublists}

This is a highlevel-function that operates on lists. It takes a list
and groups its elements into new subgroups. The given function
[[split-function]] must return the same value for all elements that
belong to the same group. Its meaning is to create create
\emph{equivalence-classes} of elements. The resulting sublists are
sorted by function [[sort-function]] which must define a
\emph{less-than}-predicate of the values [[split-function]] delivers.
The result is a list containing the sorted sublists.

<<split-list>>=
(defun split-list (split-function sort-function list)
  (let ((split-table (make-hash-table :test #'equal))
        (sorted-keys '()))
    (mapcar #'(lambda (x)
                (let ((split-value (funcall split-function x)))
                  (setf (gethash split-value split-table)
                        (append (gethash split-value split-table) (list x)))))
            list)
    (maphash #'(lambda (key element)
                 (declare (ignore element))
                 (setq sorted-keys (cons key sorted-keys)))
             split-table)
    (mapcar #'(lambda (x) (gethash x split-table))
            (sort sorted-keys sort-function))))
@

\subsubsection{Converting sublists into group-objects}

This conversion-routine iterates over a list containing sublists and
returns for every sublist an instance of class [[object-type]] and
stores the original sublist into the [[member]]-slot of the instance.
We need it, for instance, to generate the list separated/mixed-groups
in the location-reference-processing.

<<convert-sublists-to-group>>=
(defun convert-sublists-to-fixed-group (list-of-sublists object-type)
  (mapcar #'(lambda (sublist)
              (make-locref-group object-type sublist))
          list-of-sublists))
@

This slightly modified conversion-routine behaves like
[[convert-sublists-to-fixed-group]] but takes a function [[convert-func]]
instead of the object-type. This function takes as its argument the
sublist and must return an appropriate object-type. It is possible to
convert different sublists into different object-types.

<<convert-sublists-to-group>>=
(defun convert-sublists-to-specialized-groups (list-of-sublists convert-func)
  (declare (special convert-func))
  (mapcar #'(lambda (sublist)
              (make-locref-group (funcall convert-func sublist) sublist))
          list-of-sublists))
@


\subsubsection{Work all location-classes}

This function is used to process every list of location-references
belonging to the same loccation-class. It processes as folows:
\begin{enumerate}
\item apply specified \textsf{merge-to}--rules on every
  location-reference.
\item sorts the location-references by the given order
\item subgroups the references into \textsf{separated/mixed}-groups
\item builds up equivalence-classes of all location-references that
  have the same order
\item builds ranges by joining the constructed equivalence-classes
\item removes unnecessary location-references.
\end{enumerate}

The general idea is to use the generic function [[do-group]] to
subgroup a list of location-references, tuning them into new objects
and call [[do-group]] itself on every newly created object. This makes
us more independend from future extensions and the process itself is
more data-driven and less process-oriented.

The following function turns the list of location-references of an
indexentry into a locref-list-group--object that simply contains one
member. After conversion we start processing by calling [[do-group]]
on that object. We return the modified indexentry.

<<process indexentry>>=
<<locref-groups>>

(defun process-indexentry (idxent)
  (setf (get-locrefs idxent)
        (make-locref-group 'locref-list-group
                           (get-locrefs idxent)))
  (do-group (get-locrefs idxent))
  idxent)

<<application of merge-to--rules>>
@

\subsubsection{Definition of location-class-groups}

\paragraph{locref-list-group}

This class is intended to operate on an unstructured list of
location-references. The work to be done on such a list is to separate
the location-references into groups of different location-classes.
This is done by calling [[split-list]] with a function that returns
the order number of the corresponding location-class a reference
belongs to. Every created subgroup is turned into an object of type
[[locref-class-group]]. After creation of those objects we call
[[do-group]] on them.

<<class locref-list-group>>=
(defclass locref-list-group (locref-group)
    ())

(defmethod do-group ((locref-grp locref-list-group))
  (setf (get-members locref-grp)
        (convert-sublists-to-fixed-group
         (split-list #'(lambda (locref)
                         (get-ordnum (find-location-class
                                      (get-locclass locref))))
                     #'<
                     (get-members locref-grp))
         'locref-class-group))
  (mapcar #'do-group (get-members locref-grp)))
@


\paragraph{locref-class-group}

An object of type [[locref-class-group]] now must be refined into the
separeted- and mixed-groups. As defined in the separated-mixed-rule,
every optical attribute belongs to either a separate-group or a
mixed-group. We use predicate [[sepmix-type-mixed-p]] applied to
optical attribute of the first location-reference to determine the
resulting type of the
[[convert-sublists-to-specialized-groups]]--function.

<<class locref-class-group>>=
(defclass locref-class-group (locref-group)
    ())

(defmethod do-group ((locref-cls-grp locref-class-group))
  (setf (get-members locref-cls-grp)
        (convert-sublists-to-specialized-groups
           (apply-separated-mixed-rule
            (apply-merge-to-rules-on-locref-list
             (get-members locref-cls-grp)))
           #'(lambda (sublist)
               (if (sepmix-type-mixed-p (get-optattr (car sublist)))
                   'locref-mixed-group 'locref-separated-group))))
  (mapcar #'do-group (get-members locref-cls-grp))
  (setf (get-members locref-cls-grp)
        (mapcar #'build-ranges (get-members locref-cls-grp))))
@

\subsubsection{Application of rules --- pre-processing}

Application of rules is a process that is separated into different
stages. The environment we are located during this process are the
locref-class-groups that were built in the previous separation-process.

To apply the \textsf{merge-to}--rules on an indexentry the need to
apply all rules successively to each location-reference we encounter.

Function [[apply-merge-to-rules-on-locref-list]] must return a list
containing the original location-references and the newly created
virtual location-references.

<<application of merge-to--rules>>=
(defun apply-merge-to-rules-on-locref-list (locref-list)
  (append locref-list
          (mapcan #'(lambda (locref)
                      (apply-merge-to-rules-on-locref locref))
                  locref-list)))
@

This function now applies all \textsf{merge-to}--rules on on
location-reference. It works as follows. We apply all existing
\textsf{merge-to}--rules on the given location-reference [[locref]]
and if we receive a virtual location-reference we add it to list
[[vlocref-list]]. We finally return this list as the result of the
rule application.

<<application of merge-to--rules>>=
(defun apply-merge-to-rules-on-locref (locref)
  (let ((vlocref-list '()))
    (forall-merge-to-rules
     #'(lambda (idxcls merge-to-rule arguments)
         (declare (ignore idxcls arguments))
         (let ((vlocref (apply-merge-to-rule-on-locref merge-to-rule
                                                       locref)))
           (when vlocref
             (setq vlocref-list (cons vlocref vlocref-list))))))
    vlocref-list))
@

This class is used to hold all subgroups that belong to the same
separated- or mixed-group. It itself is intended as a base-class of
the two classes [[locref-separated-group]] and [[locref-mixed-group]].
We are free to bind methods to [[locref-sep-mixed-group]] that are
common to both of its subclasses, or directly to each of those classes
when we need distinct behaviour for both subclasses.

<<class locref-sep-mixed-group>>=
(defclass locref-sep-mixed-group (locref-group)
    ())

(defmethod do-group ((locref-sepmix-grp locref-sep-mixed-group))
  (setf (get-members locref-sepmix-grp)
        (convert-sublists-to-fixed-group
         (split-list #'(lambda (locref)
                         (get-ordnums locref))
                     #'numberlist<
                     (get-members locref-sepmix-grp))
         'locref-same-ordnum-group)))
@

<<class locref-separated-group>>=
(defclass locref-separated-group (locref-sep-mixed-group)
    ())
@

<<class locref-mixed-group>>=
(defclass locref-mixed-group (locref-sep-mixed-group)
    ())
@

The next class defines all location-references that have the same
[[ordnum]].

<<class locref-same-ordnum-group>>=
(defclass locref-same-ordnum-group (locref-group)
    ())
@

<<markup methods>>=
(defmethod markup-object ((locref-grp locref-same-ordnum-group)
                          (dummy-markup-list  list)
                          (context-list list)
                          (dummy-env-stack    list))
  (declare (ignore dummy-makup-list dummy-env-stack))
  (dolist (member (get-members locref-grp))
    (markup-object member '() context-list '())))
@


<<locref-groups>>=
<<split-list>>
<<convert-sublists-to-group>>
<<class locref-group>>
<<class locref-list-group>>
<<class locref-class-group>>
<<class locref-sep-mixed-group>>
<<class locref-separated-group>>
<<class locref-mixed-group>>
<<class locref-same-ordnum-group>>
<<pretty-print>>
@


<<*>>=
(provide 'idxentry)
(use-package 'clos)

<<class indexentry>>
<<generate indexentries>>
<<process indexentry>>
<<markup methods>>
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<<test>>=
(defun transitive-hull (relation)
  (mapc #'(lambda (j)
            (format t "j=~A: looking for ~A in i-lists~%" j (car j))
            (mapc #'(lambda (i)
                      (format t "  i=~A: " i)
                      (cond ((member (car j) (cdr i))
                               (progn
                                 (format t "found ~A in ~A !~%" (car j) (cdr i))
                                 (mapc #'(lambda (k)
                                           (format t "     k=~A: looking for ~A in ~A~%" k (car k) (cdr j))
                                           (when (member (car k) (cdr j))
                                             (format t "found ~A !~%" (car k))
                                             (rplacd (last i)
                                                     (list (car k)))
                                             (format t "new relation: ~A~%"
                                                     relation)
                                             (format t "new j: ~A~%" j)
                                             (format t "new i: ~A~%" i)
                                             )
                                           )
                                       relation)))
                            (t (format t "~%"))))
                  relation)
            (format t "~%"))
        relation)
  )

(defun init ()
  (setq a 'a)
  (setq b 'b)
  (setq c 'c)
  (setq d 'd)
  (setq e 'e)
  (setq f 'f)

  (setq z 'z)
  (setq y 'y)
  (setq x 'x)

  (setq rel '())
  (setq rel (acons z '() rel))
  (setq rel (acons y (list z) rel))
  (setq rel (acons x (list y) rel))

  (setq rel (acons f '() rel))
  (setq rel (acons e (list f) rel))
  (setq rel (acons d (list e) rel))
  (setq rel (acons c (list d) rel))
  (setq rel (acons b (list c) rel))
  (setq rel (acons a (list b) rel))
  )

(transitive-hull rel)
@

%% Local Variables:
%% mode: latex
%% TeX-master: t
%% End:
%%
%% $Log$
%% Revision 1.5  1995/12/15 17:09:07  kehr
%% Wrote down more specification for the locref-handling.
%%
%% Revision 1.4  1995/12/13  16:44:16  kehr
%% Extended the specification of the location-reference-handling. Implemented
%% the transitive-hull algorithm.
%%
%% Revision 1.3  1995/12/13  14:07:25  kehr
%% Just a check-in to preserve the transitive-hull-function.
%%
%% Revision 1.2  1995/12/11  17:37:01  kehr
%% Added semi-formal description of the location-refernce handling.
%%
%% Revision 1.1  1995/12/05  18:46:29  kehr
%% Added module `index' and restructured some parts.
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Revision 1.13  1995/07/28  10:41:17  kehr
%% Added simple markup for location-references and ranges. Currently
%% exists no support for differen layer-markup. A location-reference is
%% always printed as a whole.
%%
%% Revision 1.12  1995/07/27  23:59:02  kehr
%% Added support for keword-markup.
%%
%% Revision 1.11  1995/07/27  14:36:43  kehr
%% Added support for joining of locref-separated-groups.
%%
%% Revision 1.10  1995/07/26  16:19:53  kehr
%% Added support for the pretty-printer module. Output of data-structures
%% now looks more readable.
%%
%% Revision 1.9  1995/07/25  11:03:18  kehr
%% Added separation of location-references into seprated/mixed-groups.
%% Modified debug-output of locref-groups to reflect the real class-type
%% of the groups. Verified the process of generating these groups.
%%
%% Revision 1.8  1995/07/24  16:33:44  kehr
%% Added subgrouping of location-references with the same ordnum. Now
%% I'll start to join ranges.
%%
%% Revision 1.7  1995/07/23  20:48:33  kehr
%% Major changes in the location-reference-processing. Full support for
%% merge-to and separate-mixed--rules. The whole processing of
%% location-refernces is more structured now and can be easier maintained.
%%
%% Revision 1.6  1995/07/23  14:14:09  kehr
%% Added support for merge-to--rule. Now works and creates
%% virtual-attributes as expected.
%%
%% Revision 1.5  1995/07/15  20:50:22  kehr
%% Added markup-support for location-references, sorting of indexentries
%% and separation of location-reference-lists into location-class
%% subgroups.
%%
%% Revision 1.4  1995/07/11  23:33:07  kehr
%% Added indexclass-structure as assoc-list. Completed
%% indexentry-inserting with merge-insert-feature. Now we are nearlx
%% finished with the data-setup and can start to handle the
%% location-references.
%%
%% Revision 1.3  1995/07/11  15:14:16  kehr
%% Today I finished the definition of indexentries. They now will be
%% inserted into the index when a appropriate location-class was finished.
%%
%% Revision 1.2  1995/07/11  00:47:44  kehr
%% Now starting to work on a full index. Detection of indexclasses is
%% nearly finished an we can start to define indexentries to make that
%% thing work.
%%
%% Revision 1.1  1995/07/09  18:14:27  kehr
%% Initial checkin.
%%
