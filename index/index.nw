%%
%% This file is part of the `xindy'-project at the
%% Technical University Darmstadt, Computer Science Department
%% WG System Programming, Germany.
%%
%% This source is entirely written in the `noweb' literate programming
%% system.
%%
%% History at end
%%
%% Module: `index'
%%
%%
\RCS $Id$%
\RCS $Author$%
\RCS $Revision$%
\RCS $RCSfile$%
\RCS $State$%
\RCS $Date$%
%
\ModuleTitle{}


\section{Submodule \module{index}}

\subsection{Introduction}

\subsection{Abstract Specification}

\subsubsection{Definition}

\subsubsection{Operation}


\subsection{Concrete Specification}

\subsubsection{Class \class{base-index}}

Indexentries consist of a set of keys and a set of
location-references. An index is a data-structure that is empty on
creation and filled afterwards with indexentries. Indexentries that
own the same \term{merge-key} are merged together meaning that the
location-reference-sets are merged together. Usually the indexentries
are read in an unsorted sequence, so we can collect all indexentries
in a list an sort it afterwards. This is a waste of space since for
each indexentry we separately store all keys. Instead we can merge
indexentries with the same key directly when they are read.

The idea is to store the indexentries in a large hash-table with the
merge-key as its key. We are then able to directly merge new
indexentries with the old one with reasonable performance since we
share all indexentry-keys. Later we need to sort the elements of the
hash-table to markup the index.

Class \class{base-index} implements an index. It contains the
following slots:
\begin{slots}{entry-table}
  \item [entry-table] is the hash-table just described. We use
    [[#'equal]] as the tables test-function since the keys are of type
    \tstrlist.
  \item [entry-list] After the hash-table is filled, we need to sort
    and process the indexentries in an order defined by the
    indexentries \term{sort-keys}. This slot keeps this list.
  \item [idxclass] is a reference to the indexclass used to
    parametrize this index. Especally markup-information is contained here.
\end{slots}

<<Class \class{base-index}>>=
(defclass base-index ()
    ((entry-table :reader get-entry-table
                  :writer set-entry-table
                  :initform (make-hash-table :test #'equal))
     (entry-list  :reader get-entry-list :writer set-entry-list)
     (entries     :reader get-entries    :writer set-entries)
     (idxclass    :reader get-idxclass   :initarg  :idxclass)
     (hierdepth                          :initform *index-hierdepth-default*)))

(defun make-base-index (idxclass)
  (make-instance 'base-index :idxclass idxclass ))
@ %def base-index make-base-index

<<Export-list of submodule \module{index}>>=
(export '(base-index make-base-index get-entries))
@

\subsubsection{Global index definitions}
<<Global index definitions>>=
(defparameter *index-hierdepth-default* MOST-POSITIVE-FIXNUM) #|make all trees|#
(defparameter *index-entry-table*       nil) #| faster access to the entry-table |#
@

\subsubsection{Index initialisation}

<<Global index initialisation>>=
(defparameter *index* nil)

(defun create-index ()
  (setq *index* (make-base-index *indexstyle*))
  (setq *index-entry-table* (get-entry-table *index*))
  *index*)

(create-index)
@ %def *index* create-index

<<Export-list of submodule \module{index}>>=
(export '(*index* create-index))
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{Adding indexentries to the index --- The interface}

The process of adding an indexentry to the index consists of the
following steps:
\begin{enumerate}
\item We must check for a correct category-attribute class.

\item The string that represents the location-reference must be
  compared to all declared location-classes. This process returns a
  list of location-reference-objects. If only one object was returned
  this one is used as the location reference. If no object was
  returned, the string was invalid and we should issue a warning to
  the user. If more than object was returned the location-class
  declarations are not sound. In this situation, we let the first one
  win and also issue a warning.

\item If the keyword-rewriting feature is active we must perform the
  substitutions on the [[main-key]] (which is \emph{always}
  neccessary), yielding the [[merge-key]], and the [[merge-key]],
  yielding the [[sort-key]]. as described by the [[merge-rule]] and
  [[sort-rule]] replacement-rules.

  \begin{note}
    The keyword argument [[:merge-key]] must \emph{always} be supplied
    when calling this function.
  \end{note}

  The exact policies for all keys are as follows:
  \begin{enumerate}
  \item The [[merge-key]] is generated from the [[main-key]] by
    applying the keyword-rules, or if this rewrite-mechanism is not
    activated ([[#-:ORDRULES]]), the [[main-key]] directly.
  \item The [[sort-key]] is generated from the [[merge-key]] by
    applying the keyword-rules, or if this rewrite-mechanism is not
    activated ([[#-:ORDRULES]]), the [[merge-key]] directly.
  \item The [[print-key]] is only set, when it is specified
    explicitely.  If no explicit definition occured we take the
    [[main-key]] as the [[print-key]]. This can only be done at
    markup-time since we know only then if one of the raw-indexentries
    defined the print-key.
  \end{enumerate}

\item After these initial steps we check if there is already an
  indexentry in the index with the same [[merge-key]] as ours. If so
  we join both together, otherwise we create a new indexentry and
  store it into the index. When joining both indexentries we must keep
  care of the fact that we do not introduce duplicate
  location-references into the same indexentry.

\end{enumerate}

\no The description is now directly transformed into the following set
of functions:

<<Raw-index interface>>=
(defmacro indexentry (&rest args)
  (destructuring-switch-bind (&key
                              key print merge attr locref xref
                              &switch
                              (open-range  :open-range)
                              (close-range :close-range))
      args
    (cond ((not key)
             (error "missing argument :key !"))
          ((and locref xref)
             (error "you can't specify :locref and :xref at the same time !"))
          (locref `(ADD-LAYERED-LOCREF-INDEXENTRY
                    :MAIN-KEY    ',key
                    :PRINT-KEY   ',print
                    :MERGE-KEY   ',merge
                    :CATATTR     ',attr
                    :LOCREF      ',locref
                    :OPEN-RANGE  ',open-range
                    :CLOSE-RANGE ',close-range))
          (xref (when (or open-range close-range)
                  (error "you can't specify :open-range or :close-range with :xref at the same time !"))
                (unless attr
                  (error "missing :attr in combination with :xref !"))
                `(ADD-CROSSREF-INDEXENTRY
                  :MAIN-KEY  ',key
                  :PRINT-KEY ',print
                  :XREF      ',xref
                  :XREF-CLASS-NAME ',attr))
          (t (error "you must at least specify :locref or :xref !")))))

@ %def indexentry

<<Raw-index interface-definitions>>=
(defparameter *raw-index-interface-definitions*
  '(indexentry))
@ %def *raw-index-interface-definitions*

<<Export-list of submodule \module{index}>>=
(export '*raw-index-interface-definitions*)
(export *raw-index-interface-definitions*)
@

\noindent The follwing function is used to add an indexentry
containing a location-reference to the index. The function for
supporting cross-references is implemented in a separate function.

<<Adding an indexentry>>=
(defun add-layered-locref-indexentry (&key
                                      (entry-table *index-entry-table*)
                                      (idxcls *indexstyle*)
                                      locref main-key
                                      (merge-key '())
                                      (print-key '())
                                      (open-range nil) (close-range nil)
                                      (catattr    nil) (attribute nil))
  #+:ASSERT! (assert! (and main-key locref))

  (if (and open-range close-range)
      <<Warning both :open-range and :close-range>>
      (progn
        (unless catattr (setq catattr "default"))
        (let ((catattr-obj (lookup-catattr idxcls catattr)))
          (if (not catattr-obj)
              (warn "unknown attribute `~A'! (ignored)" catattr)
              (multiple-value-bind (num location-reference)
                  (create-location-reference-from-string
                   locref catattr-obj attribute)
                (when (eql 1 num)
                  #|                    ;
                  Only one vaild location-reference! Use #'eql and
                  not #'= since we compare num against NIL, too.
                  |#
                  <<Manage the keyword rewrite-rules>>
                  (cond (open-range  (set-rangeattr-open location-reference))
                        (close-range (set-rangeattr-close location-reference)))
                  (let ((old-entry (gethash merge-key entry-table)))
                    (if old-entry
                        (setf (gethash merge-key entry-table)
                              (join-indexentries
                               (gethash merge-key entry-table)
                               main-key print-key
                               location-reference))
                        (setf (gethash merge-key entry-table)
                              (make-index-entry :main-key  main-key
                                                :merge-key merge-key
                                                :print-key print-key
                                                :locrefs   (list
                                                            location-reference)
                                                :indexclass idxcls)))))))))))
@ %def add-locref-indexentry

<<Warning both :open-range and :close-range>>=
(warn "specification of both :open-range and :close-range is invalid! (ignored)")
@

<<Adding an indexentry>>=
(defun add-crossref-indexentry (&key
                                (entry-table *index-entry-table*)
                                (idxcls *indexstyle*)
                                (merge-key '())
                                (print-key '())
                                main-key
                                xref
                                xref-class-name
                                (attribute  nil))
  #+:ASSERT! (assert! (and main-key xref xref-class-name))

  (unless xref-class-name (setq xref-class-name "default"))
  (let ((xref-class (cdr (lookup-crossref-class idxcls xref-class-name))))
    (if (not xref-class)
        (warn "unknown cross-reference-class `~A'! (ignored)~%"
              xref-class-name)
        (let ((cross-reference (create-cross-reference xref-class
                                                       xref attribute)))
          (when cross-reference
            <<Manage the keyword rewrite-rules>>
            (let ((old-entry (gethash merge-key entry-table)))
              (if old-entry
                  (setf (gethash merge-key entry-table)
                        (join-indexentries (gethash merge-key entry-table)
                                           main-key print-key
                                           cross-reference))
                  (setf (gethash merge-key entry-table)
                        (make-index-entry :main-key  main-key
                                          :merge-key merge-key
                                          :print-key print-key
                                          :locrefs   (list cross-reference)
                                          :indexclass idxcls)))))))))
@ %def add-crossref-indexentry

<<Manage the keyword rewrite-rules>>=
#+:ORDRULES (unless merge-key
              (setq merge-key (gen-keyword-mergekey-list main-key)))
#-:ORDRULES (unless merge-key (setq merge-key main-key))
@

\no These functions perform the keword-rewriting on a list of strings.

<<Adding an indexentry>>=
#+:ORDRULES
(defun gen-keyword-mergekey-list (list-of-strings)
  #+ASSERT! (assert! (listp list-of-strings))
  (mapcar #'(lambda (str)
              (gen-keyword-mergekey str))
          list-of-strings))

#+:ORDRULES
(defun gen-keyword-sortkey-list (list-of-strings)
  #+ASSERT! (assert! (listp list-of-strings))
  (mapcar #'(lambda (str)
              (gen-keyword-sortkey str))
          list-of-strings))
@ %def gen-keyword-mergekey-list gen-keyword-sortkey-list

\no Function [[join-indexentries]] implements a
\emph{default-behaviour} when joining indexentries. The
indexentry-keys are joined by the [[join-with-precedence]]-function
which is defined as $\lambda x,y.(if x x y)$. Adding a new
location-reference to the indexentry is performed throuh the method
[[add]], which also checks for duplicates (\look{sec:cls-indexentry}
for further details).

<<Adding an indexentry>>=
(defun join-indexentries (idxent main-key print-key locref)
  (let ((old-main-key  (get-main-key  idxent))
        (old-print-key (get-print-key idxent)))
    (unless old-main-key  (set-main-key  main-key  idxent))
    (unless old-print-key (set-print-key print-key idxent))
    (add-location-reference-to-indexentry idxent locref)))
@ %def merge-indexentries join-with-precedence

<<Export-list of submodule \module{index}>>=
(export '(add-locref-indexentry add-crossref-indexentry))
@

\no The following function takes an string representing a
location-reference and tries to create location-references from it.
Since we cache already created instances of location-references in the
\emph{locref-cache} we first look up the cache and return a copy of
the template if we find one in the cache. Otherwise we scan all
location-classes for a match. The results of that matching are then
stored into the \emph{locref-cache}.

The function returns a multiple value of the form \texttt{(\emph{num}
  \emph{locref})} with \emph{num} being the number of matches and
\emph{locref} being the generated location-reference.

<<Adding an indexentry>>=
(defun create-location-reference-from-string (locref-str catattr attribute)
  (let* ((idxcls *indexstyle*))
    (multiple-value-bind (num locref)
        (lookup-locref-cache idxcls locref-str)
      (if num #| something was found! |#
          (case num
            (0 <<Warning none>>
               (values nil nil))
            (1 (values 1 (copy-locref-from-template locref catattr attribute))
               #| return its only member |#)
            (t <<Warning multiple>>
               (values num (copy-locref-from-template locref catattr attribute))
               #| return a copy of the stored template |#))
          (let ((locref-list
                 (map-location-classes
                  idxcls
                  #'(lambda (idxcls loccls)
                      (declare (ignore idxcls))
                      (build-location-reference loccls  locref-str
                                                catattr attribute)))))
            (case (length locref-list)
              (0 <<Warning none>>
                 (add-locref-cache idxcls locref-str 0 nil))
              (1 (add-locref-cache idxcls locref-str 1 (car locref-list))
                 #| return its only member |#)
              (t <<Warning multiple>>
                 (add-locref-cache idxcls locref-str 1 (car locref-list))
                 #| return its first member |#)))))))
@ %def create-location-reference-from-string

<<Warning multiple>>=
(warn "location-reference ~S did match multiple location-classes! (taking first one)"
      locref-str)
@

<<Warning none>>=
(warn "location-reference ~S did not match any location-class! (ignored)"
      locref-str)
@

\no This function is creating a new location-reference by copying all
common slots from the template into the new locref.

<<Adding an indexentry>>=
(defun copy-locref-from-template (locref catattr attribute)
  (declare (inline))
  (make-layered-location-reference :catattr   catattr
                                   :attribute attribute
                                   :string    (get-locref-string locref)
                                   :locclass  (get-locclass      locref)
                                   :layers    (copy-list (get-layers locref))
                                   :ordnums   (copy-list (get-ordnums locref))))
@ %def copy-locref-from-template

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{Processing an index}

After the index is filled with indexentries our first task is to sort
the index.  Additionally we need to process all indexentries. Because
we decide to make the processing of the indexentries directly driven
by the markup, we simply markup the index and start right out of the
box. To inform the user about the ongoing process we add a simple
percentage count.

<<Processing an index>>=
(defmethod process-index ((index base-index))
  (let ((hash-list '()))
    (maphash #'(lambda (key idxentry)
                 (declare (ignore key))
                 (setq hash-list (cons idxentry hash-list)))
             (get-entry-table index))
    (set-entry-list hash-list index)
    (build-indexentry-tree index)

    (setq *number-of-indexentries* (length (get-entry-list index)))
    (setq *current-number* 0)
    (setq *percentage-list*
          (mapcar #'(lambda (percent)
                      (cons (truncate (* (/ percent 100)
                                         *number-of-indexentries*))
                            percent))
                  ;; MOST-POSITIVE-FIXNUM acts as sentinel such that
                  ;; we never run out of elements
                  `(10 20 30 40 50 60 70 80 90 100 ,MOST-POSITIVE-FIXNUM)))
    (setq *processing-percentage-list* *percentage-list*)
    (mapc #'process-indexentry (get-entry-list index))
    index))
@ %def process-index

<<Export-list of submodule \module{index}>>=
(export '(process-index))
@

\subsubsection{Building and sorting the indexentry-tree}

The following functions is necessary to transform a flat index into a
hierarchical one up to a maximum depth. The process is as follows. All
indexentries that have the same top-most keyword are joined into a
indexentry with several subentries. Addtionally we separate the
top-level indexentries into the appropriate letter-groups.

<<Class \class{letter-group}>>=
(defclass letter-group ()
    ((members   :accessor get-members  :initarg :members  :type list)
     (group-id  :accessor get-group-id :initarg :group-id :type number)))

(defun make-letter-group (&key members group-id)
  (make-instance 'letter-group :members members :group-id group-id))
@ %def letter-group make-letter-group

<<Export-list of submodule \module{index}>>=
(export '(letter-group get-group-id get-members))
@

<<Processing an index>>=
(defmethod build-indexentry-tree ((index base-index))
  (let ((index-hierdepth (get-hierdepth index)))
    (when (> index-hierdepth 0)
      (set-entries (build-indexentry-tree-recursive (get-entry-list index)
                                                    index-hierdepth)
                   index)))
  (let ((letter-groups (split-list #'(lambda (idxent)
                                       (lookup-letter-group
                                        *indexstyle*
                                        (car (get-sort-key idxent))))
                                   #'<
                                   (get-entries index))))
    (set-entries (mapcar #'(lambda (lg-indexentries)
                             (make-letter-group
                              :members  (sort-indexentries lg-indexentries)
                              :group-id (lookup-letter-group
                                         *indexstyle*
                                         (car (get-sort-key
                                               (car lg-indexentries))))))
                         letter-groups)
                 index)))
@ %def build-indexentry-tree

\no The following function is responsible to build the desired tree
structure of the index. For a flat index there is actually nothing to
do since each entry cannot be split any further. The main task to be
don is to convert the flat structure into a hierarchical one, that
means indexentries can contain subentries, an so on. The [[max-depth]]
of the hierarchy is given as an argument. The case [[max-depth]]=0
means to completely transform the index into a tree. At first the list
of indexentries is split into groups for which all entries have the
same first keyword of the merge-key, i.e.\ the merge-keys
\begin{verbatim}
  ("merge" "nothing")
  ("merge")
  ("sort" "nothing")
\end{verbatim}
are split into the groups
\begin{verbatim}
  ( ("merge") ("merge" "nothing") )
  ( ("sort" "nothing") ) .
\end{verbatim}
It is \emph{important} that the entries inside the group are sorted
strictly by the [[string<]]-relation, since the first element of each
list plays a special role. If the first entry has a merge-key of
length 1 it means that it stays at this level and will not be
processed any further. The test [[(= 1 (length merge-key))]] checks
for this condition and if it is true, this indexentry is used as a
container for the rest of the list (i.e.\ indexentries that have a
longer keyword). Otherwise we construct a new indexentry and fill its
slots with the neccessary data.

<<Processing an index>>=
(defmacro take-first (list)
  `(AND ,list  (LIST (CAR ,list))))

(defun build-indexentry-tree-recursive (idxent-list
                                        max-depth
                                        &optional (curr-depth 1))
  (if (or (endp idxent-list)          #| nothing more to do |#
          (> curr-depth max-depth))   #| we reached the end |#
      idxent-list   #| this is the then case |#
      (let ((idxent-slist (split-list #'(lambda (idxent)
                                          (car (get-merge-key idxent)))
                                      #'string<
                                      idxent-list)))
        (mapcar
         #'(lambda (sublist)
             (let* ((idxent (car sublist))
                    (merge-key (get-merge-key idxent)))
               (if (= 1 (length merge-key))
                   (progn #| length = 1 |#
                     (set-sort-key #-:ORDRULES merge-key
                                   #+:ORDRULES (gen-keyword-sortkey-list
                                                merge-key)
                                   idxent)
                     (set-subentries
                      (sort-indexentries
                       (build-indexentry-tree-recursive
                        (remove-first-keywords (cdr sublist))
                        max-depth
                        (1+ curr-depth)))
                      idxent)
                     idxent)
                   (let* #| length > 1 |#
                       ((new-merge-key (take-first merge-key))
                        (new-idxent
                         (make-index-entry
                          :main-key  (take-first (get-main-key idxent))
                          :merge-key new-merge-key
                          :sort-key
                          #-:ORDRULES new-merge-key
                          #+:ORDRULES (gen-keyword-sortkey-list
                                       new-merge-key)
                          ;;:print-key (take-first (get-print-key idxent))
                          :idxclass  (get-idxclass idxent))))
                     (set-subentries
                      (sort-indexentries
                       (build-indexentry-tree-recursive
                        (remove-first-keywords sublist)
                        max-depth
                        (1+ curr-depth)))
                      new-idxent)
                     new-idxent))))
         idxent-slist))))
@ %def take-first build-indexentry-tree-recursive

<<Processing an index>>=
(defun remove-first-keywords (idxent-list)
  (declare (inline))
  (mapc #'(lambda (idxent)
            (setf (slot-value idxent 'merge-key)
                  (cdr (slot-value idxent 'merge-key)))
            (setf (slot-value idxent 'main-key)
                  (cdr (slot-value idxent 'main-key)))
            )
        idxent-list)
  idxent-list)
@ %def remove-first-keywords

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<<Sorting an index>>=
(defun sort-indexentries (indexentries)
  #+:ASSERT! (assert! (listp indexentries))
  (sort indexentries
        #'(lambda (idxent-1 idxent-2)
            (strlist< (get-sort-key idxent-1)
                      (get-sort-key idxent-2)))))

(defun strlist< (string-list-1 string-list-2)
  (declare (inline))
  (do ((rest-1 string-list-1 (cdr rest-1))
       (rest-2 string-list-2 (cdr rest-2)))
      ((or (endp rest-1) (endp rest-2)
           (string/= (first rest-1) (first rest-2)))
         (or (endp rest-1)
             (if (endp rest-2)
                 'nil
                 (string< (first rest-1) (first rest-2)))))))
@ %def sort-indexentries strlist<

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{The module root}

<<*>>=
;; $Id$

(lisp:in-package 'index)
(lisp:provide 'index)

(lisp:use-package "CLOS")
(lisp:use-package "XP")
(lisp:require "base")
(lisp:use-package "BASE")
(lisp:require "locref")
(lisp:use-package "LOCREF")
;(eval-when (compile load eval)
  (lisp:require "idxstyle")
  (lisp:use-package "IDXSTYLE")
;)

;; The following construct must be separated since the definition of
;; the *feature* :ORDRULES was added via loading the package
;; "idxstyle" but is only active *after* reading the whole SEXP.

#+:ORDRULES (use-package "ORDRULES")

<<Submodule \module{idxentry}>>
<<Submodule \module{ranges}>>
<<Submodule \module{index}>>

<<Pretty-printing>>

(defvar *RCS-Identifier* '( <<RCS-Identifier>> ))
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{The submodule root}

<<Submodule \module{index}>>=
<<Global index definitions>>
<<Class \class{base-index}>>
<<Class \class{letter-group}>>

<<Adding an indexentry>>
<<Sorting an index>>
<<Processing an index>>
<<Global index initialisation>>

<<Raw-index interface-definitions>>
<<Raw-index interface>>

<<Export-list of submodule \module{index}>>
@

<<RCS-Identifier>>=
("index" . "$Id$")
@


%% $Log$
%% Revision 1.17  1996/06/24 09:12:48  kehr
%% Several changes in all Lisp-modules due to the new startup-module and
%% the implementation of the percentage bar appearing in the processing
%% phases.
%%
%% Revision 1.16  1996/06/03  10:01:36  kehr
%% Added support for treeing layered-location-references.
%%
%% Revision 1.15  1996/05/29  14:15:43  kehr
%% Complete checkin after the major changes in the markup. See ChangeLog
%% for details.
%%
%% Revision 1.14  1996/05/20  08:48:51  kehr
%% Major release of the modules locref, idxstyle and index. Added picture
%% for the range-building FSM with a complete rewrite.
%%
%% Revision 1.13  1996/05/09  11:49:44  kehr
%% Changes in all submodules, due to macro-expansion problems during
%% compilation.
%%
%% Revision 1.12  1996/05/06  10:01:26  kehr
%% Minor changes in nearly all modules.
%%
%% Revision 1.11  1996/04/30  15:54:17  kehr
%% Rewrote large parts of part that ist responsible for adding an
%% indexentry. Moved some parts from idxentry to index and restructured
%% the whole functions that deal with that topic.
%%
%% Revision 1.10  1996/04/29  08:38:09  kehr
%% Forgot some declarations.
%%
%% Revision 1.9  1996/03/28  16:47:36  kehr
%% Changed modules to work together with the foreign package `ordrules'.
%%
%% Revision 1.8  1996/03/13  16:53:26  kehr
%% Don't remember specific changes. Just time to check-in.
%%
%% Revision 1.7  1996/01/31  16:13:31  kehr
%% Still working on th user-interface...
%%
%% Revision 1.6  1996/01/10  16:47:19  kehr
%% Tested and corrected the keyword-markup. Not finished, yet.
%%
%% Revision 1.5  1996/01/10  11:09:00  kehr
%% Re-implemented the submodule `markup' .
%%
%% Revision 1.4  1996/01/09  15:58:36  kehr
%% Corrected minor bugs.
%%
%% Revision 1.3  1996/01/09  14:27:27  kehr
%% Moved submodule `ranges' from module `locref' to this module.
%% Nearly complete rewrite of all submodules. See ChangeLog for further details.
%%
%% Revision 1.2  1995/12/11  17:37:04  kehr
%% Added semi-formal description of the location-refernce handling.
%%
%% Revision 1.1  1995/12/05  18:46:32  kehr
%% Added module `index' and restructured some parts.
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Revision 1.5  1995/07/27  23:59:03  kehr
%% Added support for keword-markup.
%%
%% Revision 1.4  1995/07/23  20:48:34  kehr
%% Major changes in the location-reference-processing. Full support for
%% merge-to and separate-mixed--rules. The whole processing of
%% location-refernces is more structured now and can be easier maintained.
%%
%% Revision 1.3  1995/07/15  20:50:23  kehr
%% Added markup-support for location-references, sorting of indexentries
%% and separation of location-reference-lists into location-class
%% subgroups.
%%
%% Revision 1.2  1995/07/11  23:33:08  kehr
%% Added indexclass-structure as assoc-list. Completed
%% indexentry-inserting with merge-insert-feature. Now we are nearlx
%% finished with the data-setup and can start to handle the
%% location-references.
%%
%% Revision 1.1  1995/07/11  00:47:44  kehr
%% Now starting to work on a full index. Detection of indexclasses is
%% nearly finished an we can start to define indexentries to make that
%% thing work.
%%

%% Local Variables:
%% mode: lisp
%% TeX-master: t
%% End:)
