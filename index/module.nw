%%
%% This file is part of the `xindy'-project at the
%% Technical University Darmstadt, Computer Science Department
%% WG System Programming, Germany.
%%
%% This source is entirely written in the `noweb' literate programming
%% system.
%%
%% History at end
%%
%% Module: index
%%
%%
\RCS $Id$%
\RCS $Author$%
\RCS $Revision$%
\RCS $RCSfile$%
\RCS $State$%
\RCS $Date$%
%

\dominitoc
\setcounter{minitocdepth}{3}
%%\faketableofcontents

\chapter{Module \module{index}}

\minitoc

%\ModuleTitle{}

\section{Introduction}

This module implements the abstract data types \type{index} and
\type{indexentry}. The first one describes the structure of an index.
The second creates instances of indexentries as they are read from the
raw-index.

The module is separated into the following parts:
\begin{deflist}{XXXXXXX}
\item [idxentry]
\item [ranges]
\item [index]
\end{deflist}

\noindent The representation of the dependencies of all submodules is
as follows:

\begin{verbatim}
<index>: <locref> <idxstyle>
index: indexentry
indexentry: ranges
ranges:
\end{verbatim}

\noindent This module needs all neccessary information properly set up
by the indexclass-instances to work. This means that all basetypes and
location-classes---system- or user-defined---are available, all
sorting- and merging-rules are known, \etc\ We need all information to
process every indexentry.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newpage
\section{External interface of module \module{index}}

\subsection{Submodule \module{idxentry}}

\begin{defcls}{indexentry}{}
  Describes the contents of an indexentry.
\end{defcls}

\begin{defunc}{make-indexentry}{\ldots \res \type{indexentry}\uip}
  Constructor of class \class{indexentry}.
\end{defunc}

\begin{defmethod}{add}{\type{indexentry} \x \type{location-reference}\uip}
  Adds a location-reference to an indexentry. (There is still some bug
  in the implementation. See \secref{sec:precondition}.)
\end{defmethod}


\subsection{Submodule \module{index}}

\begin{defcls}{index}{}
  The class of indexes.
\end{defcls}

\begin{defunc}{create-index}{\type{indexclass} \res \type{index}\uip}
  Constructor of an index. The index is bound to the given indexclass.
\end{defunc}

\begin{defunc}{add-indexentry}{\ldots\uip}
  During the reading of indexentries we have two possible ways of
  adding them to an index. First we could create an object of type
  \type{indexentry} and add this object to the index. But if we have
  already an indexentry with the same key this operation is not
  necessary at all. For preformace-reasons we give this function all
  information as keyword-arguments. (This specification must be
  revisited)
\end{defunc}

\begin{defmethod}{process-index}{\type{index}\uip}
  This performs all the necessary work of an index.
\end{defmethod}



%% $Log$
%% Revision 1.6  1996/04/30 15:54:19  kehr
%% Rewrote large parts of part that ist responsible for adding an
%% indexentry. Moved some parts from idxentry to index and restructured
%% the whole functions that deal with that topic.
%%
%% Revision 1.5  1996/01/31  16:13:32  kehr
%% Still working on th user-interface...
%%
%% Revision 1.4  1996/01/10  11:09:02  kehr
%% Re-implemented the submodule `markup' .
%%
%% Revision 1.3  1996/01/09  14:27:28  kehr
%% Moved submodule `ranges' from module `locref' to this module.
%% Nearly complete rewrite of all submodules. See ChangeLog for further details.
%%
%% Revision 1.2  1995/12/19  10:59:46  kehr
%% Changes Imakefile.
%%
%% Revision 1.1  1995/12/05  18:46:34  kehr
%% Added module `index' and restructured some parts.
%%

%% Local Variables:
%% mode: latex
%% TeX-master: t
%% End:
