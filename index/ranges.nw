%%
%% This file is part of the `xindy'-project at the
%% Technical University Darmstadt, Computer Science Department
%% WG System Programming, Germany.
%%
%% This source is entirely written in the `noweb' literate programming
%% system.
%%
%% History at end
%%
%% Submodule: ranges
%%
%%
\RCS $Id$%
\RCS $Author$%
\RCS $Revision$%
\RCS $RCSfile$%
\RCS $State$%
\RCS $Date$%
%
\ModuleTitle{}


\section{Submodule \module{ranges}}

\subsection{Introduction}

\subsection{Abstract Specification}

\subsubsection{Definition}


\subsubsection{Operation}



\subsection{Concrete Specification}


\subsubsection{Class \sans{location-range}}

Class \textsf{location-range} contains the following slots.
\begin{slots}{xxxxxxx}
\item [length] specifies the length of the current range. The initial
  value of the range-length is set to~[[2]] because we assume that a
  range is only created with two successive-objects that are joinable
  and therefore successors. In this case the range-length is
  exactly~2.
\item [first] and [[last]] contain location-references that
  are used for markup purposes.
\item [loccls] contains the location-class this range belongs to.  We
  need this to get easy access to the minimum range-length.
\item [catattr] contains the category-attribute this range belongs to.
  We need this to get easy access to the ordnum of a range. This
  allows equal dispatching for location-references and
  location-ranges.
\item [ordnums] contains the ordnum of the location-referene stored in
  [[first]]. Only to define a [[get-ordnum]]-method.
\item [inner] keeps a list of all collected locref-lists
  \texttt{(~(~)\ldots(~)~)} that were eaten up by this
  location-reference.
\end{slots}

\no The arguments [[first]] and [[last]] of the constructor
[[make-location-range]] must be lists.

<<Class \class{location-range}>>=
(defclass location-range ()
    ((length   :initarg :length)
     (first    :initarg :first)
     (last     :initarg :last)
     (layers   :initarg :layers)
     (ordnums  :initarg :ordnums)
     (inner    :initarg :inner)
     (locclass :initarg :locclass)
     (catattr  :initarg :catattr)
     (subrefs  :initform '())))

(defun make-location-range (&key length first last first-ordnum inner locclass)
  (make-instance 'location-range
                 :length   length
                 :first    first
                 :last     last
                 :inner    inner
                 :ordnums  first-ordnum
                 :layers   (get-layers first)
                 :locclass locclass
                 :catattr  (get-catattr first)))
@ %def location-range make-location-range

<<Export-list of submodule \module{ranges}>>=
(export '(location-range get-first get-last get-length))
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{Building of ranges}

\subsection{Overview}

\paragraph*{Precondition}

Given is a list $L$ of location-references. All elements of $L$ belong
to the same location-class and own the same category-attribute.

\paragraph*{Task}

\begin{enumerate}
\item Build all possible ranges. Ignore all already \emph{dropped}
  location-references.
\item If a range was build and contains location-references that are
  \emph{dropable} since they are first part of a
  \irule{drop-if-merged}-rule \emph{drop} them. This can mean to
  actually delete them.
\end{enumerate}

\paragraph*{Postcondition}

Return a list $L$ of location-references and ranges. All
\term{unnecessary} (i.e.\ deleted or virtual location-references
should be removed.

\paragraph*{Implementation}

Because we distinguish between standard- and var-classes the
generic-function [[build-ranges]] dispatches with its third argument
over \class{standard-} or \class{var-location-class}. The method bound
to [[var-location-class]] currently does nothing at all.

Returned is a list $L$ whose elements are
single-element-lists of location-ranges or lists of
location-references
%%
\begin{center}
  ( \{(\emph{locrefs}\ldots) $|$ (\emph{locrange})\}$*$\ldots \ldots
  () ) .
\end{center}
%%
This structure is left to allow better testing. It may be cleaned up
in further steps.

<<Building of location-reference-ranges>>=
(defmethod build-ranges ((locref-list list)
                         (idxcls indexclass)
                         (loccls var-location-class))
  locref-list)
@ %def build-ranges


\subsection{Building of ranges for \class{standard-location-class}}

The location-references that are read from the raw-index stream have a
tag associated with them stored in slot [[rangeattr]]. This flag
indicates if this location-reference marks the beginning or end of a
explicit range. If none of those the location-refrence is a normal
location-reference. This tag must be carefully integrated into the
process of range-building. Actually this is now the third major
rewrite of the following code now resulting in a finite-state-machine
driven process. The graph with the associated state transitions is
presented here. It looks very ugly, but I think it may help to
understand the code below much better.

\medskip
\input{rangefsm.ltx}
\medskip

\no The states are as follows:

\begin{states}{XXXXXXXXXXXX}
\item[:START] indicates the start of a new process of building ranges.
  If we encounter a [[close]] tag the input is invalid.
\item[:READ] indicates that we are in the middle of a range-building.
  If we encounter a [[close]] tag the input is invalid.
\item[:OPEN-RANGE] indicates that we have met a [[open]] range and now
  eat all location-references up to the next [[close]]. If we
  encounter another [[open]] or reach the end of the list without
  meeting a [[close]], then the input was invalid. Meaningful warnings
  should be issued in these cases.
\end{states}

\no How does it work? First we remove all location-references from the
list whose state is `deleted'. This occurs in a situation when already
applied \irule{drop-if-merged}-rules set their state to `deleted'.
These location-references mustn't be used anymore.

If the location-class all these location-references (passed by
[[locref-list]]) belong to, allows a range-building at all, we
proceed, otherwise we return the [[valid-list]] as it is.

The list is now split into sublists with location-references that
share the same ordnum. Afterwards we enter the finite state machine
which consists of a simple [[loop]]. It is described far more detailed
below and implements the given FSM-graph above.

<<Building of location-reference-ranges>>=
<<Build-ranges macro definitions>>
(defmethod build-ranges ((locref-list list)
                         (idxcls indexclass)
                         (loccls standard-location-class))
  (let ((valid-list (mapcan #'(lambda (locref)
                                (unless (state-deleted-p locref)
                                  (list locref)))
                            locref-list)))
    (ifnot valid-list
           '()
           (ifnot (joining-allowed-p loccls)
                  valid-list
                  (let ((same-ordnum-list (split-same-locrefs valid-list))
                        <<Declare more variables>> )
                    (loop
                      <<Calculate new variable settings>>
                      (ecase state
                        (:START       <<Code for [[:START]]>> )
                        (:READ        <<Code for [[:READ]]>> )
                        (:OPEN-RANGE  <<Code for [[:OPEN-RANGE]]>> ))
                      <<Do neccessary actions>> ))))))
@ %def build-ranges

\no The following code manages the handling in state [[:START]]. If we
encounter the end of the input list we return the [[result-list]].
The normal case is that we meet location-references without any tag.
We simply push them onto the stack and switch to state [[:READ]]. If we
meet an [[open]] and a [[close]] location-reference at the same time,
we assume that they are placed in the right order and switch into state
[[:READ]] after pushing the locrefs to the stack. When seeing a
[[open]] we switch to state [[:OPEN-RANGE]] also accompanied by a
push. The last case shouldn't occur!

<<Code for [[:START]]>>=
(cond (list-end     (return (apply #'nconc  #| see note below for explanation |#
                                   (apply #'nconc result-list))))
      (no-typ-p     (newstat :READ)       (pushl))
      (open+close-p (newstat :READ)       (pushone))
      (open-p       (newstat :OPEN-RANGE) (pushl) (set-open-range))
      (close-p      (warn-invalid-close locref) (newstat :START))
      (t (error
          "INTERNAL-ERROR in build-ranges - :START")))
@

<<Building of location-reference-ranges>>=
(defun warn-invalid-close (locref)
  (warn
   (with-output-to-string (s)
     (format s "Found a :close-range in the index that wasn't opened before!~%")
     (format s "Location-reference is ~A in keyword ~A~%"
             (get-locref-string locref)
             (get-main-key *currently-processed-indexentry*))
     (format s "I'll continue and ignore this.~%"))))
@

\no The piece of code for [[:READ]] is more sophisticated. If we meet
the [[list-end]] we switch back to state [[:START]] accompanied by
trying to make a range from the stack-contents. An important invariant
of the algorithm is that there is always something on the stack when
we are in the states [[:READ]] or [[:OPEN-RANGE]], so [[make-range]]
has always something to do. Otherwise we are interested if the
location-reference is a successor of the previous one, whose ordnum is
stored in [[prev-ordnum]]. If the successor relationship holds and we
encounter a tag-free location-reference or one with both tags set, we
simply push it to the stack. If we met a location-reference that
breaks the range we switch back to state [[:START]], keeping the
current locref for the next start and trying to build a range. The
last case is an error, since in [[:READ]]-mode we shouldn't encounter
a [[close]] that was never opened.

<<Code for [[:READ]]>>=
(if list-end
    (progn (newstat :START) (make-range))
    (progn
      (setq curr-ordnum (get-ordnums locref))
      (let ((succ-p (ordnum-successor-p prev-ordnum curr-ordnum)))
        (cond ((and succ-p no-typ-p)     (pushl))
              ((and succ-p open+close-p) (pushone))
              ((or no-typ-p
                   (not (and succ-p
                             open-p))) (newstat :START) (keep) (make-range))
              (open-p                  (newstat :OPEN-RANGE)
                                       (pushl) (set-open-range))
              (close-p  (warn-invalid-close locref) (newstat :READ))
              (t (error "INTERNAL-ERROR in build-ranges - :READ"))))))
@

\no In this mode we eat all until we find a [[close]]. If the list-end
is reached we have an unmatched [[open]]. A [[close]] switches back to
state [[:READ]] and another [[open]] is senseless.

<<Code for [[:OPEN-RANGE]]>>=
(cond (list-end  <<Warning unmatched [[:OPEN-RANGE]]>> (newstat :START))
      ((or no-typ-p open+close-p) (pushl))
      (open-p    <<Warning that [[:OPEN-RANGE]] met [[:OPEN]]>>
                 (newstat :OPEN-RANGE))
      (close-p    (newstat :READ) (pushl))
      (t (error "INTERNAL-ERROR in build-ranges - :OPEN-RANGE")))
@

<<Warning unmatched [[:OPEN-RANGE]]>>=
(warn
   (with-output-to-string (s)
     (format s "Found no :close-range matching an already opened one!~%")
     (format s "Location-reference is ~A in keyword ~A.~%"
             (get-locref-string last-open-locref)
             (get-main-key *currently-processed-indexentry*))
     (format s "Maybe I lost some of the regular location-references.~%")))
@

<<Warning that [[:OPEN-RANGE]] met [[:OPEN]]>>=
(warn
 (with-output-to-string (s)
   (format s "Found :open-range that was already opened!~%")
   (format s "Location-references are ~A and ~A in keyword ~A.~%"
           (get-locref-string last-open-locref)
           (get-locref-string locref)
           (get-main-key *currently-processed-indexentry*))
   (format s "I'll continue and ignore this.~%")))
@

\no Here are the neccessary macros. Their aim is to hide the
implementation details from the interested reader.

<<Build-ranges macro definitions>>=
(defmacro newstat (s)
  `(setq new-state ,s))

(defmacro pushl ()
  `(progn
    (setq curr-ordnum (get-ordnums locref))
    (unless locref-stack
      (setq first-ordnum curr-ordnum)
      (setq first-locref locref))
    (setq prev-ordnum curr-ordnum)
    (push locrefs locref-stack)))

(defmacro pushone ()
  `(progn
    (setq curr-ordnum (get-ordnums locref))
    (unless locref-stack
      (setq first-ordnum curr-ordnum)
      (setq first-locref locref))
    (setq prev-ordnum curr-ordnum)
    (push (list (car locrefs)) locref-stack)))

(defmacro set-open-range ()
  `(setq last-open-locref locref))

(defmacro keep ()
  `(setq back-flag t))

(defmacro make-range ()
  `(setq make-flag t))
@

<<Declare more variables>>=
(locref-stack '())
(result-list  '())
(state        :START)
(join-length  (get-join-length loccls))
new-state
open-p close-p open+close-p no-typ-p list-end
make-flag back-flag
locrefs locref last-open-locref first-locref
first-ordnum prev-ordnum curr-ordnum
@

<<Calculate new variable settings>>=
(setq locrefs  (car same-ordnum-list))
(setq list-end (null locrefs))
(setq locref   (car locrefs))
(setq open-p   (find-if #'(lambda (locref)
                            (rangeattr-open-p (get-rangeattr locref)))
                        locrefs))
(setq close-p  (find-if #'(lambda (locref)
                            (rangeattr-close-p (get-rangeattr locref)))
                        locrefs))
(setq open+close-p  (and open-p close-p))
(setq no-typ-p (not (or  open-p close-p)))
@

\no Here are the actions that are to performed at the end of every
loop. If [[make-flag]] is set we try to build a range pushing the
result to the [[result-list]] and resetting the flag. If the
[[back-flag]] is set we are not allowed to remove the first element of
the [[same-ordnum-list]].

\begin{note}
  Some remarks on the used data structures: The [[locref-stack]]
  consists of a list of lists of location-references or -ranges, i.e.\
  \texttt{( (\ldots) \ldots\ (\ldots) )}. The elements are on the
  second level. When pushing the whole stack into the [[result-list]]
  we must consider that this is actually a list of locref-stacks and
  therfore has its leafs on the third level.

  When pushing a location-range to the [[result-list]] we must take
  care that is pushed onto the same level as the location-references.
  This is the reason why we push it onto the list after enclosing it
  into two [[list]]-forms (\emph{see} below in the code).

  Before returning the list we simply remove all the unneccessary
  braces from the [[result-list]] (\emph{see} code for [[:START]]).
\end{note}

<<Do neccessary actions>>=
(when make-flag
  (let ((range-len (- (car (last prev-ordnum)) (car (last first-ordnum)))))
    (if (>= range-len join-length)
        (push (list (list
                     (make-location-range :first-ordnum first-ordnum
                                          :locclass loccls
                                          :inner  locref-stack
                                          :first  first-locref
                                          :last   (caar locref-stack)
                                          :length range-len)))
              result-list)
        (push locref-stack result-list))
    (setq locref-stack '())
    (setq make-flag nil)))
(if back-flag
    (setq back-flag nil)
    (setq same-ordnum-list (cdr same-ordnum-list)))
(setq state new-state)
@

\no That's all folks!

%%(defmacro no-typ ()
%%  `(= 1 (length elt)))
%%(defmacro open-typ ()
%%  `(MEMBER :OPEN (CDR ELT)))
%%(defmacro close-typ ()
%%  `(MEMBER :CLOSE (CDR ELT)))
%%(defmacro open+close-typ ()
%%  `(AND
%%    (MEMBER :OPEN (CDR ELT))
%%    (MEMBER :CLOSE (CDR ELT))))
%%(defmacro nstat (s)
%%  `(SETQ NSTATE ,s))
%%(defmacro push-elt ()
%%  `(PUSH (CAR ELT) TMP))
%%(defmacro back ()
%%  `(SETQ BACK-FLAG t))
%%(defmacro make ()
%%  `(SETQ MAKE-FLAG t))
%%(defmacro succ ()
%%  `(= (CAR ELT) (1+ (CAR TMP))))
%%(defun FSM (list)
%%  (let ((state :START)
%%        (nstate nil)
%%        (tmp   '())
%%        (res   '())
%%        (make-flag nil)
%%        (back-flag nil)
%%        (elt   nil))
%%    (loop
%%      (format t "state  = ~A~%" state)
%%      (format t "list   = ~A~%" list)
%%      (format t "res    = ~A~%" res)
%%      (format t "tmp    = ~A~%" tmp)
%%      (format t "finding  ~A~%~%" (car list))
%%      (setq elt (car list))
%%      (case state
%%        (:START
%%           (cond ((endp list)      (return res))
%%                 ((open+close-typ) (nstat :READ) (push-elt))
%%                 ((no-typ)         (nstat :READ) (push-elt))
%%                 ((open-typ)       (nstat :OPEN-RANGE) (push-elt))
%%                 ((close-typ)      (error ":START meets :CLOSE"))
%%                 (t (error "wee forgot something in :START"))))
%%        (:READ
%%           (cond ((endp list)             (nstat :START)  (make))
%%                 ((and (succ)
%%                       (open+close-typ))  (push-elt))
%%                 ((and (succ) (no-typ))   (push-elt))
%%                 ((no-typ)                (nstat :START)  (back) (make))
%%                 ((and (succ) (open-typ)) (nstat :OPEN-RANGE) (push-elt))
%%                 ((close-typ)             (error ":READ meets :CLOSE"))
%%                 (t (error "wee forgot something in :READ"))))
%%        (:OPEN-RANGE
%%           (cond ((endp list)           (error ":OPEN-RANGE meets END"))
%%                 ((or (no-typ)
%%                      (open+close-typ)) (push-elt))
%%                 ((open-typ)            (error ":OPEN-RANGE meets :OPEN"))
%%                 ((close-typ)           (nstat :READ) (push-elt))
%%                 (t (error "wee forgot something in :OPEN-RANGE")))))
%%      (when make-flag
%%        (if (>= (- (car tmp) (car (last tmp))) 2)
%%            (push (cons (car tmp) (car (last tmp)))
%%                  res)
%%            (push tmp res))
%%        (setq tmp '())
%%        (setq make-flag nil))
%%      (if back-flag
%%          (setq back-flag nil)
%%          (pop list))
%%      (setq state nstate)
%%      )))

%%\no What for do we need a \term{post-processing}? Our approach is to
%%build ranges even if their length may be too short that they are
%%allowed to exist. Therefore we need the post-processing to check if
%%the range-building is allowed at all. If it's not allowed, we simply
%%return the list as it was before and drop the range. Otherwise we
%%iterate over all location-references that were eaten up (they are
%%stored in the [[inner]]-slot) and apply the [[drop-function]] on their
%%parents if they have parents. This may result in the situtation that a
%%parents state is reset to `deleted' or `virtual'.

%%The post-processing for a locref-list simply returns that list.

<<Building of location-reference-ranges>>=
(defmethod post-process ((locrange location-range) (drop-function function))
  (let ((locref-list (apply #'nconc (get-inner locrange))))
    (cond ((>= (get-length locrange)
               (get-join-length (get-locclass locrange)))
             (mapc #'(lambda (locref)
                       (let ((origin (get-origin locref)))
                         (when origin
                           (funcall drop-function origin))))
                   locref-list)
             ;;(set-inner '() locrange)
             locrange)
          (t locref-list))))

;(defmethod post-process ((locref-list list) x)
;  (declare (ignore x))
;  locref-list)

(defmethod post-process ((locref location-reference) x)
  (declare (ignore x))
  locref)
@ %def post-process

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{Successor-handling}

The predicate \emph{successor-p}$(l_1,l_2)$ with $l_1,l_2$
location-references, defines if $l_2$ is a \emph{successor} of $l_1$
and they are therefore joinable to a range. The following rules are
neccessary to fulfill the predicate.
\begin{enumerate}
\item $l_1$ and $l_2$ belong to the same location-class.
  \label{enum:same-locclass}
\item The category-attribute of $l_1$ is equal to the
  category-attribute of $l_2$.
  \label{enum:catattr-eq}
\item They are not marked explicitely in the \emph{not-successor-table}.
  \label{enum:not-succ-table}
\item Additionally one of the following rules must be true.
  \begin{enumerate}
  \item They are explicitely marked in the successor-table as
    successors.
    \label{enum:succ-table}
  \item The following conditions must be true:
    \begin{enumerate}
    \item $n_1\ldots n_{d-1}$ of both ordnums are equal, the ordnum of
      layer $d$ of $l_2$ is successor of layer~$d$ of~$l_1$.
      \label{enum:ordnum-succ}
    \item Joining on the given layer-depth is permitted my the
      location-class description.
      \label{enum:joining-allowed}
    \end{enumerate}
  \end{enumerate}
\end{enumerate}
%%
Method [[build-range]] is called with a list of location-references
with equal location-classes and category-attributes. Therefore
conditions~\ref{enum:same-locclass} and~\ref{enum:catattr-eq} are
already satisfied. Currently we don't support successor tables and
therefore conditions~\ref{enum:not-succ-table}
and~\ref{enum:succ-table} are not considered. For
standard-location-classes condition~\ref{enum:joining-allowed} is
checked in the [[post-process]]-method. The implementation of
condition~\ref{enum:ordnum-succ} is as follows:

We define a function that scans the ordnum-lists of two
location-references. If the ordnums match for all higher levels
excluding the last one and the last level fulfills the
successor-predicate on numbers then [[ordnums-2]] is successor of
[[ordnums-1]].

<<Successor handling>>=
(defun ordnum-successor-p (ordnums-1 ordnums-2)
  (declare (inline))
  (and ordnums-1 #|is there really something in it, or we are about to start?|#
       (equal (butlast ordnums-1) (butlast ordnums-2))
       (equal (1+ (car (last ordnums-1)))
              (car (last ordnums-2)))))
@ %def ordnum-successor-p

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{The submodule root}

<<Submodule \module{ranges}>>=
;; $Id$

<<Class \class{location-range}>>
<<Successor handling>>
<<Building of location-reference-ranges>>

<<Export-list of submodule \module{ranges}>>
@

<<RCS-Identifier>>=
("ranges" . "$Id$")
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{Pretty-printing}

<<Pretty-printing>>=
#+:XP
(defun pprint-location-range (s range)
  (pprint-logical-block
   (s nil :prefix "[" :suffix "]")
   (format s "range: ~D " (get-length range))
   (pprint-newline :fill s)
   (write-string " loccls: " s)
   (write (get-locclass range) :stream s)
   (pprint-newline :fill s)
   (write-string " catattr: " s)
   (write (get-catattr range) :stream s)
   (format s "/~D" (get-sort-ordnum (get-catattr range)))
   (pprint-newline :fill s)
   (format s " ordnums: ~A " (get-ordnums range))
   (pprint-newline :fill s)
   (pprint-logical-block
    (s nil :prefix "<" :suffix ">")
    (write-string "first " s)
    (pprint-newline :miser s)
    (write (get-first range) :stream s))
   (pprint-newline :mandatory s)
   (pprint-logical-block
    (s nil :prefix "<" :suffix ">")
    (write-string "inner " s)
    (pprint-newline :linear s)
    (write (get-inner range) :stream s))
   (pprint-newline :mandatory s)
   (pprint-logical-block
    (s nil :prefix "<" :suffix ">")
    (write-string "last " s)
    (pprint-newline :miser s)
    (write (get-last range) :stream s))
   (pprint-newline :mandatory s)))

#+:XP
(set-pprint-dispatch 'location-range #'pprint-location-range)
@

%% Local Variables:
%% mode: lisp
%% TeX-master: t
%% End:
%%
%% $Log$
%% Revision 1.10  1997/03/18 14:50:08  kehr
%% Checkin after the several changes. a) the definition of slot-accessor
%% macros in the whole source, b) the modifications suggested by Bernd
%% Raichle to make the source compatible with Allegro CL and c) a first
%% version of the new sorting scheme.
%%
%% Revision 1.9  1997/03/10 15:51:29  kehr
%% Added support for (merge-to :drop) which was inadvertently left out.
%%
%% Revision 1.8  1997/01/23 19:04:46  kehr
%% Minor changes.
%%
%% Revision 1.7  1997/01/17 16:42:34  kehr
%% Several changes for new version 1.1.
%%
%% Revision 1.6  1996/07/01  09:19:34  kehr
%% Added support for flat indexes and modified logfile-support.
%%
%% Revision 1.5  1996/06/03  10:01:39  kehr
%% Added support for treeing layered-location-references.
%%
%% Revision 1.4  1996/05/29  14:15:46  kehr
%% Complete checkin after the major changes in the markup. See ChangeLog
%% for details.
%%
%% Revision 1.3  1996/05/20  08:49:01  kehr
%% Major release of the modules locref, idxstyle and index. Added picture
%% for the range-building FSM with a complete rewrite.
%%
%% Revision 1.2  1996/05/09  11:49:46  kehr
%% Changes in all submodules, due to macro-expansion problems during
%% compilation.
%%
%% Revision 1.1  1996/01/09  14:27:30  kehr
%% Moved submodule `ranges' from module `locref' to this module.
%% Nearly complete rewrite of all submodules. See ChangeLog for further details.
%%
%% Revision 1.5  1995/12/19  11:00:18  kehr
%% Significant changes.
%%
%% Revision 1.4  1995/12/15  17:09:54  kehr
%% Modified sources for the new module structure.
%%
%% Revision 1.3  1995/12/05  18:47:13  kehr
%% Minor changes (nreverse etc.)
%%
%% Revision 1.2  1995/11/29  16:53:30  kehr
%% Changed class hierarchy below class `location-class'. Defined a
%% location-class< predicate and wrote several regression tests. Wrote a
%% lot of documentation for submodule `locclass'.
%%
%% Revision 1.1  1995/11/08  16:13:29  kehr
%% Initial checkin.
%%
%% Revision 1.5  1995/07/28  10:41:19  kehr
%% Added simple markup for location-references and ranges. Currently
%% exists no support for differen layer-markup. A location-reference is
%% always printed as a whole.
%%
%% Revision 1.4  1995/07/27  14:36:45  kehr
%% Added support for joining of locref-separated-groups.
%%
%% Revision 1.3  1995/07/26  16:19:56  kehr
%% Added support for the pretty-printer module. Output of data-structures
%% now looks more readable.
%%
%% Revision 1.2  1995/07/25  11:03:19  kehr
%% Added separation of location-references into seprated/mixed-groups.
%% Modified debug-output of locref-groups to reflect the real class-type
%% of the groups. Verified the process of generating these groups.
%%
%% Revision 1.1  1995/07/23  20:48:36  kehr
%% Major changes in the location-reference-processing. Full support for
%% merge-to and separate-mixed--rules. The whole processing of
%% location-refernces is more structured now and can be easier maintained.
%%
