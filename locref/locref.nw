%%
%% This file is part of the `xindy'-project at the
%% Technical University Darmstadt, Computer Science Department
%% WG System Programming, Germany.
%%
%% This source is entirely written in the `noweb' literate programming
%% system.
%%
%% History at end
%%
%% Module: location-reference
%%
%%
\RCS $Id$%
\RCS $Author$%
\RCS $Revision$%
\RCS $RCSfile$%
\RCS $State$%
\RCS $Date$%
%
\ModuleTitle{}


\section{Submodule \module{location-reference}}

\subsection{Introduction}

A \term{location-reference} is a reference to an object in a document.
These objects are named \term{location}. Examples of locations are
pages, chapters, sections, paragraphs, glossaries, verses \etc{}

An index is structured into indexentries which usually own a list of
location-references. This part implements location-references and is
responsible for their construction and management.

Since the structure of a location-reference must match a
location-class description their stucture is somehow comparable.
A location-reference consists of subparts called \term{layers}. Each
layer corresponds to a basetype.


\subsection{Abstract Specification}

\subsubsection{Definition}

A location-reference is a set
\begin{center}
  $\{$ \func{layers, ordnums, catattr, locclass} $\}$
\end{center}
with
\begin{deflistit}{locclassXX}
\item [layers] is \type{locref-layer-list}
\item [ordnums] is a \tintlist
\item [catattr] is a \tcatattr
\item [locclass] is a \tloccls.
\end{deflistit}


\subsubsection{Operation}


\subsection{Concrete Specification}

This is one of the most important parts of the project. Because of its
complexity we will try to enter the source description in a more
educational way starting with the global classes and structures and
extending to more complex issues. After general introduction we
concentrate on the \term{markup} of the introduced objects. Finally we
present pretty-printing functions and other stuff which are less
important.

\subsubsection{External interface}




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{Class \class{location-reference}}

We start with classs \class{location-reference}. The implementation is
directly derived from its abstract description.

<<class \class{location-reference}>>=
(defclass location-reference ()
    ((layers    :reader get-layers   :initarg :layers)
     (ordnums   :reader get-ordnums  :initarg :ordnums)
     (catattr   :reader get-catattr  :initarg :catattr)
     (locclass  :reader get-locclass :initarg :locclass)))
@ %def location-reference

\no The definition of the constructor is a little bit tricky since it
uses [[&allow-other-keys]] to allow other (for creation of instances
unneccessary) keys specifiers to be given. We gain a much easier code
when this function is called from outside (\emph{see} function
[[gen-indexentries]] and [[forall-location-classes]] for more
details).

<<class \class{location-reference}>>=
(defun make-location-reference (&key (layers '()) (ordnums '())
                                     (catattr "") (locclass nil)
                                     &allow-other-keys)
  (make-instance 'location-reference
                 :layers  layers   :ordnums  ordnums
                 :catattr catattr  :locclass locclass))
@ %def make-location-reference


\subsubsection{Class \class{locref-layer}}

A \term{location-reference-layer} layer is a \tstring. It is the
smallest entity in the location-reference data hierarchy. It consists
only of the string that matched with the corresponding layer during
the input-parsing of raw location-references.

<<class \class{locref-layer}>>=
(defclass locref-layer ()
    ((layer  :reader get-layer  :initarg :layer)))

(defun make-locref-layer (layer)
  (make-instance 'locref-layer :layer layer))
@ %def locref-layer make-locref-layer


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{Matching strings with location-classes}

During parsing the input stream of raw-index entries one of the tasks
to be done is the matching of the location reference strings against
a location-class description. As mentioned in the technical
description we must distiguish between standard- and var-classes.
Standard-classes are of fixed structure and the matching succeeds only
if \emph{all} layers and separators together matched completely the
given string. Var-classes are a set of different classes and we must
perform so-called \emph{prefix-matching}.

One remaining problem is the matching of separators in var-classes. It
is not yet stated if separators must match always or not. If the
strings `[[1]]', `[[1.]]' and `[[1.2]]' are compared to var-class
`[[num.num]]' the first and third should always match, but is not yet
clear if the second alternative should be valid or not.  Strictly
spoken we must declare if the separator acts as a \emph{prefix} to
hierarchy No.~2 or if it acts like a \emph{postfix} to hierarchy
No.~1.

To implement those two strategies we define a generic function
[[match-object]] that dispatches over all kinds of location-classes.
The corresponding methods implement the described matching technique.

<<Matching strings with location-classes>>=
(defgeneric match-object (string loccls))
@ %def match-object

\no It tries to match the given \tstring [[locstring]] on the given
location-class [[loccls]].  This is achieved by successively matching
all layers and separators against the string. It returns a
multiple-value of the form
%%
\begin{center}
  (\emph{layer-separator-list}, \emph{ordnum-list} : \tintlist).
\end{center}
%%
%It is split into several functions, that can only be used in
%conjunction because we use [[special]] bindings to make some variables
%visible for all functions. I didn't want to have a large function, so
%I split it into three small pieces. I could also make use of noweb's
%facilities to insert chunks into code, but this prevents me from
%testing the whole function in the [[emacs]]-editor.
%
%Indeed, it looks very ugly and I should rewrite it once more.
%
%\medskip

\no So what is the way of success? Ok, at first we iterate over all
layers of the locclass description until no more elements are left
over or until [[locstring]] has been completely eaten up. Inside the
loop we match [[locstring]] against each layer which can be a
\type{locref-layer} or a \type{loccls-separator}. Then the appropriate
subfunctions are invoked which update [[layer-list]] and
[[ordnum-list]].

<<Matching strings with location-classes>>=
(defmethod match-locclass-by-string ((locstring string)
                                     (loccls    location-class))
  (declare (special locstring loccls))
  (let ((layer-list  '())
        (ordnum-list '())
        (finished nil))
    (declare (special layer-list ordnum-list finished))
    (do ((layers (get-layers loccls) (cdr layers)))
        ((or finished (endp layers) (= 0 (length locstring))))
      (declare (special layers))
      (let ((curr-layer (car layers))
            (locstring-len (length locstring)))
        (declare (special curr-layer locstring-len))
        (cond ((typep curr-layer 'loccls-layer)
                 (match-loccls-layer))
              ((typep curr-layer 'loccls-separator)
                 (match-loccls-separator))
              (t (error "match-locclass-by-string: wrong element in list")))))
    (if (= 0 (length locstring))
        (values layer-list ordnum-list)
        (values nil nil))))
@

\no To match a loccls-layer we simply invoke [[prefix-match]] that
dispatches over all basetypes and (hopefully) tells us a correct match
or the multiple value [[(nil nil nil)]]. We only check the value of
[[ordnum]] against [[nil]] to recognize a failure.

<<Matching strings with location-classes>>=
(defun match-loccls-layer ()
  (declare (special layer-list ordnum-list finished locstring curr-layer))
  (multiple-value-bind (matched-string rest-string ordnum)
      (prefix-match locstring (get-basetype curr-layer))
    (if (null ordnum)
        (setq finished t)
      (progn
        (setq locstring rest-string)
        (setq layer-list
              (append layer-list
                      (list (make-locref-layer matched-string))))
        (setq ordnum-list
              (append ordnum-list (list ordnum)))))))
@

\no Matching agains a separator ist just prefix-matching of two
strings.

<<Matching strings with location-classes>>=
(defun match-loccls-separator ()
  (declare (special curr-layer locstring))
  (let* ((sepstr    (get-separator curr-layer))
         (seplen    (length sepstr))
         (match-len (string/= sepstr locstring)))
    (when (or (null match-len) (eql seplen match-len))
      (setq locstring (subseq locstring seplen)))))
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{Sorting of location-references}

To compare two location-references based on their \term{total order}
we first determine the order of their corresponding location-classes.
If those are equal we compare the list of ordnums. We successively
compare the order-numbers and stop, if we find one number being
smaller than the other. Now sorting the location-references is a
simple thing. We just do a [[sort]] on the references with [[locref<]]
as the sort-function.

<<location-reference-sorting>>=
(defun locref< (locref-1 locref-2)
  (let ((ordnum-1 (get-ordnum (get-locclass locref-1)))
        (ordnum-2 (get-ordnum (get-locclass locref-2))))
    (cond ((= ordnum-1 ordnum-2)
             (numberlist< (get-ordnums locref-1) (get-ordnums locref-2)))
          (t (< ordnum-1 ordnum-2)))))

(defun numberlist< (numlist-1 numlist-2)
  (cond ((equal numlist-1 numlist-2) nil)
        (t
           (do ((rest-1 numlist-1 (cdr rest-1))
                (rest-2 numlist-2 (cdr rest-2)))
               ((or (endp rest-1) (endp rest-2)
                    (/= (first rest-1) (first rest-2)))
                  (cond ((endp rest-1) t)
                        ((endp rest-2) nil)
                        (t (< (first rest-1) (first rest-2)))))))))
@ %def locref< numberlist<

\begin{TODO}
  \item The following part is uncorrected yet.
\end{TODO}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{Class \class{virtual-locref}}

This class is used as a helpful construct during the processing of
location-references. A \term{virtual} location-reference is created by
applying a \textsf{merge-to}--rule. It additionally contains the slot
[[secondary-attr]] which holds the name of the original attribute. E.g
[[bold]] \textsf{merge-to} [[default]] creates a virtual
location-reference with the [[catattr]] set to [[default]] and
[[secondary-attr]] set to [[bold]].

It means that a virtual location-reference is based upon a existing
location-reference and a secondary attribute.

<<class \class{vitual-locref}>>=
(defclass virtual-locref (location-reference)
    ((secondary-attr :accessor get-secondary-attr :initarg :secondary-attr)))

(defun make-virtual-locref (locref catattr secondary-attrib)
  (make-instance 'virtual-locref
                 :layers         (get-layers  locref)
                 :ordnums        (get-ordnums locref)
                 :catattr        catattr
                 :locclass       (get-locclass locref)
                 :secondary-attr secondary-attrib))
@ %def virtual-locref make-virtual-locref


<<*>>=
(in-package 'locref)

(use-package 'clos)
(use-package 'xp)

(require 'base)
(use-package 'base)

(require 'basetype)
(require 'locclass)

<<class \class{location-reference}>>
<<class \class{vitual-locref}>>
<<class \class{locref-layer}>>
<<Matching strings with location-classes>>
<<location-reference-sorting>>
<<pretty-print>>
<<markup methods>>
@



\subsubsection{Markup}


\no Markup of a location-reference ist currently implemented as a
simple printing of all layers and separators.

<<markup methods>>=
(defmethod markup-object ((locref location-reference)
                          (dummmy-markup-list  list)
                          (context-list list)
                          (dummmy-env-stack    list))
  (dolist (context-string context-list)
    (mprint context-string))
  (let ((layers (get-layers locref)))
    (dolist (loccls-layer (get-layers (get-locclass locref)))
      (typecase loccls-layer
        (loccls-layer
           (markup-object (pop layers) '() '() '()))
        (loccls-separator
           (markup-object loccls-layer '() '() '()))))))
@

\no We don't need to markup any virtual location-references.

<<markup methods>>=
(defmethod markup-object ((vlocref virtual-locref)
                          (dummmy-markup-list  list)
                          (dummmy-context-list list)
                          (dummmy-env-stack    list))
  )
@


\no Markup of a location-layer ist currently implemented as a simple
printing of the layer-string.

<<markup methods>>=
(defmethod markup-object ((layer locref-layer)
                          (dummmy-markup-list  list)
                          (dummmy-context-list list)
                          (dummmy-env-stack    list))
  (mprint (get-layer layer)))
@


\subsubsection{Pretty-printing}

\no A block for pretty-printing a location-reference.

<<pretty-print>>=
(defun pprint-location-reference (s locref)
  (pprint-logical-block
   (s nil :prefix "<" :suffix ">")
   (pprint-indent :block 2 s)
   (pprint-newline :linear s)
   (write (get-layers locref) :stream s)
   (pprint-newline :linear s)
   (write-string "=" s)
   (pprint-newline :linear s)
   (write (get-ordnums locref) :stream s)
   (write-string ";" s)
   (write (get-locclass locref) :stream s)
   (write-string ";" s)
   (pprint-newline :linear s)
   (write-string (get-catattr locref) s)
   (when (typep locref 'virtual-locref)
     (write-string " + " s)
     (write-string (get-secondary-attr locref) s))
   ))

(set-pprint-dispatch 'location-reference #'pprint-location-reference)
@



<<pretty-print>>=
(defun pprint-locref-layer (s layer)
  (write (get-layer layer) :stream s))

(set-pprint-dispatch 'locref-layer #'pprint-locref-layer)
@

%% Local Variables:
%% mode: latex
%% TeX-master: t
%% End:
%%
%% $Log$
%% Revision 1.5  1995/12/05 13:53:41  kehr
%% Complete restructuring of submodule `locclass'. New generic functions
%% introduced and separation of standard- and var-classes implemented.
%%
%% Revision 1.4  1995/11/29  16:53:30  kehr
%% Changed class hierarchy below class `location-class'. Defined a
%% location-class< predicate and wrote several regression tests. Wrote a
%% lot of documentation for submodule `locclass'.
%%
%% Revision 1.3  1995/11/22  16:45:16  kehr
%% Corrected the eval-when construct. But I don't understand, why it
%% seemed to work yesterday :-)
%%
%% Revision 1.2  1995/11/19  18:39:06  kehr
%% Introduced packages base and locref.
%%
%% Revision 1.1  1995/11/08  16:13:25  kehr
%% Initial checkin.
%%
%% Revision 1.12  1995/07/28  10:41:18  kehr
%% Added simple markup for location-references and ranges. Currently
%% exists no support for differen layer-markup. A location-reference is
%% always printed as a whole.
%%
%% Revision 1.11  1995/07/27  23:59:04  kehr
%% Added support for keword-markup.
%%
%% Revision 1.10  1995/07/27  14:36:44  kehr
%% Added support for joining of locref-separated-groups.
%%
%% Revision 1.9  1995/07/26  16:19:54  kehr
%% Added support for the pretty-printer module. Output of data-structures
%% now looks more readable.
%%
%% Revision 1.8  1995/07/23  20:48:35  kehr
%% Major changes in the location-reference-processing. Full support for
%% merge-to and separate-mixed--rules. The whole processing of
%% location-refernces is more structured now and can be easier maintained.
%%
%% Revision 1.7  1995/07/23  14:14:09  kehr
%% Added support for merge-to--rule. Now works and creates
%% virtual-attributes as expected.
%%
%% Revision 1.6  1995/07/15  20:50:24  kehr
%% Added markup-support for location-references, sorting of indexentries
%% and separation of location-reference-lists into location-class
%% subgroups.
%%
%% Revision 1.5  1995/07/11  23:33:09  kehr
%% Added indexclass-structure as assoc-list. Completed
%% indexentry-inserting with merge-insert-feature. Now we are nearlx
%% finished with the data-setup and can start to handle the
%% location-references.
%%
%% Revision 1.4  1995/07/11  15:14:16  kehr
%% Today I finished the definition of indexentries. They now will be
%% inserted into the index when a appropriate location-class was finished.
%%
%% Revision 1.3  1995/07/10  23:26:59  kehr
%% Corrected bugs that caused location-class-matching to fail. Also
%% discovered some bugs in matching under certain circumstances, I hadn't
%% tested so far.
%%
%% Revision 1.2  1995/07/10  19:08:17  kehr
%% Now corrected setup of location-classes. The was a bug in the
%% add-indexclass methods and some wrong reader-functions.
%%
%% Revision 1.1  1995/07/10  00:58:18  kehr
%% Completed noweb-support. Current version must be debugged to correct
%% some minor errors.
%%
