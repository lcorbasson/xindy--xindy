%%
%% This file is part of the `xindy'-project at the
%% Technical University Darmstadt, Computer Science Department
%% WG System Programming, Germany.
%%
%% This source is entirely written in the `noweb' literate programming
%% system.
%%
%% History at end
%%
%% Module:    location-reference (locref)
%% Submodule: location-reference (locref)
%%
%%
\RCS $Id$%
\RCS $Author$%
\RCS $Revision$%
\RCS $RCSfile$%
\RCS $State$%
\RCS $Date$%
%
\ModuleTitle{}


\section{Submodule \module{location-reference}}

\subsection{Introduction}

A \term{location-reference} is a reference to an object in a document.
These objects are named \term{location}. Examples of locations are
pages, chapters, sections, paragraphs, glossaries, verses \etc{}

An index is structured into indexentries which usually own a list of
location-references. This part implements location-references and is
responsible for their construction and management.

Since the structure of a location-reference must match a
location-class description their structure is somehow comparable.  A
location-reference consists of subparts called \term{layers}. Each
layer corresponds to a basetype.

\subsection{Concrete Specification}

The inheritance graph of the location-reference classes is shown in
the following diagram.

\begin{center}
  \input{locref.ltx}
\end{center}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{Class \class{location-reference}}

<<Class \class{location-reference}>>=
(defclass location-reference ()
    ((locclass  :initarg :locclass)
     (attribute :reader get-attribute :writer set-attribute
                :initarg :attribute)))

(defmacro get-locclass (locref)
  `(SLOT-VALUE ,locref 'LOCCLASS))
@ %def location-reference get-locclass

<<Export-list of submodule \module{locref}>>=
(export '(location-reference get-locclass locclass))
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{Class \class{layered-location-reference}}

We start with class \class{layered-location-reference}. The implementation is
directly derived from its abstract description.

<<Class \class{layered-location-reference}>>=
(defclass layered-location-reference (location-reference)
    ((layers    :initarg :layers)
     (string    :initarg :string   :type string)
     (ordnums   :initarg :ordnums)
     (catattr   :initarg :catattr)
     (state     :initarg :state)
     (rangeattr                                  :initform 'nil)
     (origin    :reader get-origin :writer set-origin :initform 'nil)
     (subrefs                      :type list    :initform '())))

(defmacro get-locref-string (locref)  `(SLOT-VALUE ,locref 'STRING))
(defmacro get-catattr (locref)        `(SLOT-VALUE ,locref 'CATATTR))
(defmacro get-ordnums (locref)        `(SLOT-VALUE ,locref 'ORDNUMS))
(defmacro get-rangeattr (locref)      `(SLOT-VALUE ,locref 'RANGEATTR))

(defmacro get-state   (locref)        `(SLOT-VALUE ,locref 'STATE))
(defmacro set-state   (state locref)
  `(SETF (SLOT-VALUE ,locref 'STATE) ,state))

(defmacro get-subrefs (locref)        `(SLOT-VALUE ,locref 'SUBREFS))
(defmacro set-subrefs (subrefs locref)
  `(SETF (SLOT-VALUE ,locref 'SUBREFS) ,subrefs))
@ %def layered-location-reference get-catattr get-ordnums get-rangeattr get-locref-string get-subrefs set-subrefs get-state set-state

\no The constructor takes the additional keyword [[:virtual]] to
distinguish between the two states a location-reference can be in
after creation.

<<Class \class{layered-location-reference}>>=
(defun make-layered-location-reference (&key (string "")
                                             (layers '())    (ordnums '())
                                             (catattr nil)   (locclass nil)
                                             (attribute nil) (virtual nil))
  (make-instance 'layered-location-reference
                 :string    string
                 :layers    layers   :ordnums  ordnums
                 :catattr   catattr  :locclass locclass
                 :attribute attribute
                 :state  (if virtual 'locref-state-virtual 'locref-state-normal)))
@ %def make-layered-location-reference

\no The states a layered-location-reference can be in are
[['locref-state-normal]], [['locref-state-virtual]] and
[['locref-state-deleted]]. They should be accessed only by the
following mutators and predicates.

<<Class \class{layered-location-reference}>>=
(defmacro rangeattr-open-p (attr)
  `(EQL ,attr :RANGEATTR-OPEN))

(defmacro rangeattr-close-p (attr)
  `(EQL ,attr :RANGEATTR-CLOSE))

(defmacro set-rangeattr-open (locref)
  `(SETF (SLOT-VALUE ,locref 'RANGEATTR) :RANGEATTR-OPEN))

(defmacro set-rangeattr-close (locref)
  `(SETF (SLOT-VALUE ,locref 'RANGEATTR) :RANGEATTR-CLOSE))
@ %def rangeattr-open-p rangeattr-close-p set-rangeattr-open set-rangeattr-close

<<Class \class{layered-location-reference}>>=
(defmethod state-normal-p ((locref layered-location-reference))
  (eql 'locref-state-normal (get-state locref)))

(defmacro state-virtual-p (locref)
  `(EQL 'LOCREF-STATE-VIRTUAL (SLOT-VALUE ,locref 'STATE)))

(defmacro state-deleted-p (locref)
  `(EQL 'LOCREF-STATE-DELETED (SLOT-VALUE ,locref 'STATE)))

(defmethod set-state-normal ((locref layered-location-reference))
  (set-state 'locref-state-normal locref)
  locref)

(defmethod set-state-virtual ((locref layered-location-reference))
  (set-state 'locref-state-virtual locref)
  locref)

(defmethod set-state-deleted ((locref layered-location-reference))
  (set-state 'locref-state-deleted locref)
  locref)
@ %def state-normal-p state-virtual-p state-deleted-p set-state-normal set-state-virtual set-state-deleted

<<Export-list of submodule \module{locref}>>=
(export '(layered-location-reference
          make-layered-location-reference
          get-layers       get-ordnums       get-catattr
          get-rangeattr    rangeattr         get-locref-string  string
          get-origin       set-origin        catattr ordnums
          state-normal-p   state-virtual-p   state-deleted-p
          set-state-normal set-state-virtual set-state-deleted
          set-rangeattr-open set-rangeattr-close
          get-subrefs      set-subrefs  subrefs
          rangeattr-open-p rangeattr-close-p))
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{Class \class{crossref-location-reference}}

<<Class \class{crossref-location-reference}>>=
(defclass crossref-location-reference (location-reference)
    ((target :reader get-target :writer set-target :initarg :target)))

(defun create-cross-reference (loccls target attribute)
  (make-instance 'crossref-location-reference
                 :locclass loccls :target target :attribute attribute))
@ %def crossref-location-reference make-crossref-location-reference

<<Export-list of submodule \module{locclass}>>=
(export '(crossref-location-reference create-cross-reference))
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{How to build a location-reference}

This section deals with the task to build location-references from a
given string, a category-attribute and a location-class description.
The signature of the function [[build-location-reference]] is
described in the interface of this module. The implementatation is
realised via methods bound to the location-classes, since the
construction of a location-reference directly depends on the
location-class.

Currently we support only the creation of layered location-references.

<<Building a location-reference>>=
(defmethod build-location-reference ((locclass   layered-location-class)
                                     (locref-str string)
                                     (catattr    category-attribute)
                                     attribute)
  (multiple-value-bind (layers ordnums)
      (perform-match locref-str locclass)
    (and layers ordnums
         (make-layered-location-reference
          :locclass  locclass  :layers  layers
          :ordnums   ordnums   :catattr catattr
          :attribute attribute :string locref-str))))
@ %def build-location-reference

<<Export-list of submodule \module{locclass}>>=
(export 'build-location-reference)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{Class \class{category-attribute}}

Here we define the category-attribute-slots.

\begin{slots}{processing-ordnum}
\item [name] Category-attributes have a name that is specified by the
  user and stored in this slot.
\item [ordnum] By defining the category-attribute-groups each
  category-attribute is given a ordnum which says that it is member of
  the [[ordnum]]th category-attribute-group. Used for sorting-purposes.
\item [sort-ordnum] defines the position in the sort-order.
\item [processing-ordnum] defines the order that is defined by the
  topologial sort of the \irule{drop-if-merged}-rules.
\item [type] gives information if this cat-attr is declared as a
  \term{single} group or as a \term{member} of a group. The respective
  symbols are [[catattr-single]] and [[catattr-member]].
\item [markup] The user also can specify a special markup for each
  attribute.
\end{slots}

<<Class \class{category-attribute}>>=
(defclass category-attribute ()
    ((name               :reader get-name
                         :initarg :name)
     (catattr-grp-ordnum :writer set-catattr-grp-ordnum
                         :initarg :ordnum)
     (sort-ordnum        :reader get-sort-ordnum
                         :writer set-sort-ordnum
                         :initform 0)
     (processing-ordnum  :reader get-processing-ordnum
                         :writer set-processing-ordnum
                         :initform 0)
     (type               :reader get-type
                         :writer set-type
                         :initarg :type)))

(defmacro get-catattr-grp-ordnum (catattr)
  `(SLOT-VALUE ,catattr 'CATATTR-GRP-ORDNUM))

(defun make-category-attribute (attr-name)
  (make-instance 'category-attribute :name attr-name))
@ %def category-attribute make-category-attribute

\no When specifying the category-attribute-groups each catattr is
informed about its [[ordnum]] and [[type]]. These can be set directly
by using [[set-ordnum]] and [[set-type]].

<<Export-list of submodule \module{locref}>>=
(export '(category-attribute make-category-attribute
          get-name               catattr-grp-ordnum
          get-catattr-grp-ordnum set-catattr-grp-ordnum
          get-sort-ordnum        set-sort-ordnum
          get-processing-ordnum  set-processing-ordnum
          get-type   set-type
          get-markup set-markup))
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{Sorting of location-references}

We are now interested how to sort a list of location-references
belonging to a indexentry. When building ranges and examine
successor-relationships we need three sorting criteria that are
possible with location-references.
%%
\begin{enumerate}
\item The order given by the location-class. It is defined via the
  [[location-class<]]-relation (\look{sec:location-class}).
\item The order given by the location-ordnums. The ordnums are a list
  of numbers. To compare two lists of ordnums, we successively compare
  the order-numbers and stop, if we find one number being smaller than
  the other.
\item The order given by the category-attribute ([[catattr<]]).
\end{enumerate}

\no We define the three predicates for their \emph{less-than}- and
\emph{equal}-relations. Here are the predicates for the location-class
relation.

<<Sorting location-references>>=
(defun locref-class< (locref-1 locref-2)
  (declare (inline))
  (< (get-ordnum (get-locclass locref-1))
     (get-ordnum (get-locclass locref-2))))

(defun locref-class= (locref-1 locref-2)
  (declare (inline))
  (eql (get-locclass locref-1) (get-locclass locref-2)))
@ %def locref-class< locref-class=

\no Here follows the implementation of the ordnum-relation.

<<Sorting location-references>>=
(defmacro locref-ordnum< (ordnum-list-1 ordnum-list-2)
  `(COND
    ((EQUAL ,ordnum-list-1 ,ordnum-list-2) NIL)
    (T (DO ((REST-1 ,ordnum-list-1 (CDR REST-1))
            (REST-2 ,ordnum-list-2 (CDR REST-2)))
           ((OR (ENDP REST-1) (ENDP REST-2)
                (/= (FIRST REST-1) (FIRST REST-2)))
              (COND ((ENDP REST-1) T)
                    ((ENDP REST-2) NIL)
                    (T (< (FIRST REST-1) (FIRST REST-2)))))))))

(defmacro locref-ordnum= (ordnum-list-1 ordnum-list-2)
  `(EQUAL ,ordnum-list-1 ,ordnum-list-2))
@ %def locref-ordnum< locref-ordnum=

\no Finally we define a combined version of both. I'm not yet sure if
i really need it.

<<Sorting location-references>>=
(defun locref< (locref-1 locref-2)
  (cond ((locref-class= locref-1 locref-2)
           (locref-ordnum< locref-1 locref-2))
        (t (locref-class< locref-1 locref-2))))

(defmethod locref= ((locref-1 crossref-location-reference)
                    (locref-2 layered-location-reference))
  nil)

(defmethod locref= ((locref-1 layered-location-reference)
                    (locref-2 crossref-location-reference))
  nil)

(defmethod locref= ((locref-1 crossref-location-reference)
                    (locref-2 crossref-location-reference))
  (and (locref-class= locref-1 locref-2)
       (equal (get-target locref-1) (get-target locref-2))))

(defmethod locref= ((locref-1 layered-location-reference)
                    (locref-2 layered-location-reference))
  (and (locref-class= locref-1 locref-2)
       (eql (get-catattr locref-1) (get-catattr locref-2))
       (locref-ordnum= (get-ordnums locref-1) (get-ordnums locref-2))
       (eql (get-rangeattr locref-1) (get-rangeattr locref-2))))
@ %def locref< locref=

<<Export-list of submodule \module{locref}>>=
(export '(locref-class<  locref-class=
          locref-ordnum< locref-ordnum=
          locref<        locref=))
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{The module root}

<<*>>=
;; $Id$

(in-package "LOCREF")
(provide "LOCREF")

(use-package "CLOS")
(use-package "XP")
(require "base")
(use-package "BASE")

<<Submodule \module{basetype}>>
<<Submodule \module{locclass}>>
<<Submodule \module{locref}>>

<<Pretty-printing>>

(defvar *RCS-Identifier* '( <<RCS-Identifier>> ))
@

<<Submodule \module{locref}>>=
<<Class \class{location-reference}>>
<<Class \class{layered-location-reference}>>
<<Class \class{category-attribute}>>
<<Class \class{crossref-location-reference}>>
<<Building a location-reference>>
<<Sorting location-references>>
<<Export-list of submodule \module{locref}>>
@

<<RCS-Identifier>>=
("locref" . "$Id$")
@


\subsubsection{Pretty-printing}

A block for pretty-printing a location-reference.

<<Pretty-printing>>=
(defun pprint-layered-location-reference (s locref)
  (pprint-logical-block
   (s nil :prefix "[" :suffix "]")
   (cond ((state-normal-p  locref) (write-string "Nor:" s))
         ((state-virtual-p locref) (write-string "Vir:" s))
         (t (write-string "Del:" s)))
   (cond ((rangeattr-open-p  (get-rangeattr locref)) (write-string "OPEN:" s))
         ((rangeattr-close-p (get-rangeattr locref)) (write-string "CLOSE:" s)))
   (write-string (get-locref-string locref) s)
   (write-string "=" s)
   (write (get-layers locref) :stream s)
   (write-string "=" s)
   (write (get-ordnums locref) :stream s)
   (write-string ";" s)
   (pprint-newline :fill s)
   (write (get-locclass locref) :stream s)
   (write-string ";" s)
   (pprint-newline :fill s)
   (write (get-catattr locref) :stream s)
   (when (get-origin locref)
     (write-string "<-" s)
     (write (get-catattr (get-origin locref)) :stream s))
   (pprint-newline :fill s)
   (write (get-subrefs locref) :stream s)
   ))

(set-pprint-dispatch 'layered-location-reference
                     #'pprint-layered-location-reference)
@

<<Pretty-printing>>=
(defun pprint-crossref-location-reference (s xref)
  (pprint-logical-block
   (s nil :prefix "[" :suffix "]")
   (write (get-locclass xref) :stream s)
   (write-string "->" s)
   (write (get-target xref) :stream s)
   ))

(set-pprint-dispatch 'crossref-location-reference
                     #'pprint-crossref-location-reference)
@

<<Pretty-printing>>=
(set-pprint-dispatch 'category-attribute
                     #'(lambda (s catattr)
                         (write-string "`" s)
                         (write-string (get-name catattr) s)
                         (write-string "'" s)))
@


%% $Log$
%% Revision 1.20  1996/05/29 14:15:58  kehr
%% Complete checkin after the major changes in the markup. See ChangeLog
%% for details.
%%
%% Revision 1.19  1996/05/20  08:49:31  kehr
%% Some modifications due to performance improvement.
%%
%% Revision 1.18  1996/05/09  11:49:54  kehr
%% Changes in all submodules, due to macro-expansion problems during
%% compilation.
%%
%% Revision 1.17  1996/05/07  08:59:35  kehr
%% Added CVS support for xfig-pictures.
%%
%% Revision 1.16  1996/05/06  10:01:49  kehr
%% Minor changes in nearly all modules.
%%
%% Revision 1.15  1996/04/30  15:54:57  kehr
%% Corrected some descriptions in the text.
%%
%% Revision 1.14  1996/01/31  15:25:22  kehr
%% Minor modifications.
%%
%% Revision 1.13  1996/01/17  16:56:02  kehr
%% Improved documentation and threw out some of the markup-stuff.
%%
%% Revision 1.12  1996/01/15  19:17:32  kehr
%% All files revisited and documentation improved.
%% External specification no in the module.nw. There it is better
%% accessible for a reader. The basic interface of the module is
%% presented as a whole.
%%
%% Revision 1.11  1996/01/10  16:48:02  kehr
%% Some modifications due to the markup-stuff. Renaming of the chunk-names.
%%
%% Revision 1.10  1996/01/09  14:28:38  kehr
%% Moved submodule `ranges' from this module to module `index'.
%% Minor modifications in conjunction with the rewrite of module `index'.
%%
%% Revision 1.9  1995/12/19  11:00:15  kehr
%% Significant changes.
%%
%% Revision 1.8  1995/12/15  17:09:52  kehr
%% Modified sources for the new module structure.
%%
%% Revision 1.7  1995/12/07  18:15:16  kehr
%% Minor modifications.
%%
%% Revision 1.6  1995/12/05  18:47:09  kehr
%% Minor changes (nreverse etc.)
%%
%% Revision 1.5  1995/12/05  13:53:41  kehr
%% Complete restructuring of submodule `locclass'. New generic functions
%% introduced and separation of standard- and var-classes implemented.
%%
%% Revision 1.4  1995/11/29  16:53:30  kehr
%% Changed class hierarchy below class `location-class'. Defined a
%% location-class< predicate and wrote several regression tests. Wrote a
%% lot of documentation for submodule `locclass'.
%%
%% Revision 1.3  1995/11/22  16:45:16  kehr
%% Corrected the eval-when construct. But I don't understand, why it
%% seemed to work yesterday :-)
%%
%% Revision 1.2  1995/11/19  18:39:06  kehr
%% Introduced packages base and locref.
%%
%% Revision 1.1  1995/11/08  16:13:25  kehr
%% Initial checkin.
%%
%% Revision 1.12  1995/07/28  10:41:18  kehr
%% Added simple markup for location-references and ranges. Currently
%% exists no support for differen layer-markup. A location-reference is
%% always printed as a whole.
%%
%% Revision 1.11  1995/07/27  23:59:04  kehr
%% Added support for keword-markup.
%%
%% Revision 1.10  1995/07/27  14:36:44  kehr
%% Added support for joining of locref-separated-groups.
%%
%% Revision 1.9  1995/07/26  16:19:54  kehr
%% Added support for the pretty-printer module. Output of data-structures
%% now looks more readable.
%%
%% Revision 1.8  1995/07/23  20:48:35  kehr
%% Major changes in the location-reference-processing. Full support for
%% merge-to and separate-mixed--rules. The whole processing of
%% location-refernces is more structured now and can be easier maintained.
%%
%% Revision 1.7  1995/07/23  14:14:09  kehr
%% Added support for merge-to--rule. Now works and creates
%% virtual-attributes as expected.
%%
%% Revision 1.6  1995/07/15  20:50:24  kehr
%% Added markup-support for location-references, sorting of indexentries
%% and separation of location-reference-lists into location-class
%% subgroups.
%%
%% Revision 1.5  1995/07/11  23:33:09  kehr
%% Added indexclass-structure as assoc-list. Completed
%% indexentry-inserting with merge-insert-feature. Now we are nearlx
%% finished with the data-setup and can start to handle the
%% location-references.
%%
%% Revision 1.4  1995/07/11  15:14:16  kehr
%% Today I finished the definition of indexentries. They now will be
%% inserted into the index when a appropriate location-class was finished.
%%
%% Revision 1.3  1995/07/10  23:26:59  kehr
%% Corrected bugs that caused location-class-matching to fail. Also
%% discovered some bugs in matching under certain circumstances, I hadn't
%% tested so far.
%%
%% Revision 1.2  1995/07/10  19:08:17  kehr
%% Now corrected setup of location-classes. The was a bug in the
%% add-indexclass methods and some wrong reader-functions.
%%
%% Revision 1.1  1995/07/10  00:58:18  kehr
%% Completed noweb-support. Current version must be debugged to correct
%% some minor errors.
%%

%% Local Variables:
%% mode: lisp
%% TeX-master: t
%% End:
