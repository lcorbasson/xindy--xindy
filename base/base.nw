%%
%% This file is part of the `xindy'-project at the
%% Technical University Darmstadt, Computer Science Department
%% WG System Programming, Germany.
%%
%% This source is entirely written in the `noweb' literate programming
%% system.
%%
%% History at end
%%
%% Module: base
%%
%%
\RCS $Id$%
\RCS $Author$%
\RCS $Revision$%
\RCS $RCSfile$%
\RCS $State$%
\RCS $Date$%
%

\chapter{Module \module{Base}}

This module is the basic part of the project. It defines some funcions
and macros, that are used in the other modules.

\section{The root of the submodule}

<<*>>=
(lisp:defpackage "BASE")
(lisp:in-package "BASE")
(lisp:provide "base")

#+:CMU17 (defpackage "CLOS")

(lisp:use-package "CLOS")

(eval-when (eval load compile)
  #+CLISP (when (find-package "XP")
            (pushnew :XP *features*))
  #(or +ALLEGRO-V4.3 :CMU17) (pushnew :XP *features*)
  )

(setq *print-pretty* t)
(setq *print-escape* t)

(defparameter *mappings-trace* nil)
(defparameter *locref-trace*   nil)
(export '(*mappings-trace* *locref-trace*))

<<Kludges>>
<<Error message system>>
<<Useful macros>>
<<Assertions>>
<<Slot accessor macros>>
<<Splitting lists into sublists --- [[split-list]]>>

(defvar *RCS-Identifier* '( <<RCS-Identifier>> ))

<<Export-list of module \module{base}>>
@

<<RCS-Identifier>>=
("base" . "$Id$")
@

\subsection{Useful macros}

<<Useful macros>>=
(defmacro ifnot (expr then-body else-body)
  `(IF (NOT ,expr) ,then-body ,else-body))
@ %def ifnot

Allegro CL has exit in package [[excl]]. CMU-CL uses
[[unix:unix-exit]] instead.

<<Useful macros>>=
(defun error-exit ()
  #+CLISP (exit 1)
  #+:ALLEGRO-V4.3 (excl:exit 1)
  #+:CMU17 (unix:unix-exit 1)
  )
@ %def error-exit

<<Export-list of module \module{base}>>=
(export '(ifnot error-exit))
@

[[CLISP]] still defines [[simple-condition-format-string]] instead of
[[simple-condition-format-control]]. The following macro simply does
the necessary redefinition for all other Lisps.

<<Kludges>>=
#-CLISP
(defmacro simple-condition-format-string (&rest args)
  `(simple-condition-format-control ,@args))
#-CLISP
(export '(simple-condition-format-string))
@


\subsection{Error message system}

The error message system distinguishes the following kind of errors:

\begin{description}
\item[info] indicates a informative message for the user. The
  character of these messages is not an error but simply an
  information.
\item[nraw] (reverse of `warn'). Use this to report a situation which
  is correct but maybe unwanted. These are not reported to the logfile.
\item[oops] indicates a serious problem. The user should correct the
  error or unpredictable behaviour might result. Use this macro to
  report a serious error. Additionally, all these problems are also
  reported to the logfile.
\item[gol] (reverse of `log') writes some useful information into the
  logfile.
\end{description}


<<Error message system>>=
(defmacro info (&rest msg)
  `(APPLY #'FORMAT *ERROR-OUTPUT* (LIST ,@msg)))
@ %def info

<<Error message system>>=
(defparameter *nraw-error-message* "~&WARNING: ")

(defmacro nraw (&rest msg)
  `(PROGN
    (FORMAT *ERROR-OUTPUT* BASE::*NRAW-ERROR-MESSAGE*)
    (APPLY #'FORMAT *ERROR-OUTPUT* (LIST ,@msg))))
@ %def nraw

<<Error message system>>=
(defparameter *oops-error-message* "~&ERROR: ")

(defmacro oops (&rest msg)
  `(LET ((MSG (LIST ,@msg)))
    (FORMAT *ERROR-OUTPUT* BASE::*OOPS-ERROR-MESSAGE*)
    (APPLY #'FORMAT *ERROR-OUTPUT* MSG)
    (WHEN *LOGGING-ON*
      (FORMAT *LOGGING-STREAM* BASE::*OOPS-ERROR-MESSAGE*)
      (APPLY #'FORMAT *LOGGING-STREAM* MSG))))
@ %def oops

\noindent This is a more primitive version of [[oops]]. It expects a
format string and the format string arguments as parameters.

<<Error message system>>=
(defmacro oops* (fmt args)
  `(LET ((FMT  ,fmt)
         (ARGS ,args))
    (FORMAT *ERROR-OUTPUT* BASE::*OOPS-ERROR-MESSAGE*)
    (APPLY #'FORMAT *ERROR-OUTPUT* FMT ARGS)
    (WHEN *LOGGING-ON*
      (FORMAT *LOGGING-STREAM* BASE::*OOPS-ERROR-MESSAGE*)
      (APPLY #'FORMAT *LOGGING-STREAM* FMT ARGS))))
@ %def oops*


\subsection{Logging message system}

The following macro can be used to issue useful logging-information
into the stream \texttt{*log-stream*}. Logging can be dynamically
turned on and off by setting \texttt{*logging-on*} to \texttt{t} or
\texttt{nil}. Since the name \texttt{log} is already used for the
arithmetic function we name it \texttt{gol} which can be read as ''go
on logging''.

<<Error message system>>=
(defparameter *logging-stream* nil)
(defparameter *logging-on*     nil)

(defmacro gol (flag &rest msg)
  `(WHEN (AND ,flag *LOGGING-ON*)
    (APPLY #'FORMAT *LOGGING-STREAM* (list ,@msg))))
@ %def gol

<<Export-list of module \module{base}>>=
(export '(oops oops* nraw info gol
          *logging-stream* *logging-on*))
@

\subsection{Assertions}

The following macro can be used to declare assertions.

<<Assertions>>=
(defmacro assert! (cond &optional msg)
  `(UNLESS ,cond
    (FORMAT *ERROR-OUTPUT* "Internal error! Assertion ~A failed!" ',cond)
    ,(if msg
         `(ERROR "~S" ,msg)
         `(ERROR "Entering debugger!"))))

(pushnew :ASSERT! *features*)
@

<<Export-list of module \module{base}>>=
(export 'assert!)
@

\subsection{Slot Accessor Macros}

<<Slot accessor macros>>=
(defmacro define-slot-accessors (accessors)
  `(eval-when (compile load eval)
    ,@(apply #'nconc
             (mapcar
              #'(lambda (acc)
                  (let ((getnam (intern (concatenate 'string "GET-"
                                                     (symbol-name acc))))
                        (setnam (intern (concatenate 'string "SET-"
                                                     (symbol-name acc))))
                        )
                    `((defmacro ,getnam (obj)
                        (list 'slot-value obj '',acc))
                      (defmacro ,setnam (val obj)
                        (list 'setf (list 'slot-value obj '',acc) val))
                      (export '(,getnam ,setnam ,acc)))))
              accessors))))

(define-slot-accessors (
                        attribute
                        base-alphabet
                        basetype
                        catattr
                        catattr-grp-ordnum
                        entries
                        entry-list
                        entry-table
                        first
                        group-definition
                        hierdepth
                        idxclass
                        inner
                        join-length
                        last
                        last-in-group
                        layers
                        length
                        letters
                        locclass
                        locref-cache
                        locref-string
                        locrefs
                        members
                        merge-key
                        sort-key
                        print-key
                        main-key
                        name
                        order
                        ordnum
                        ordnums
                        origin
                        processing-ordnum
                        props
                        rangeattr
                        separator
                        sort-ordnum
                        state
                        subentries
                        subrefs
                        symbols
                        target
                        type
                        ))
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{Splitting into sublists}

This is a function that operates on lists. It takes a list and groups
its elements into new subgroups. The given function [[split-function]]
must return the same value for all elements that belong to the same
group. These values are compared with the [[#'equal]]-predicate. Its
meaning is to create \emph{equivalence-classes} of elements. The
resulting sublists are sorted by function [[sort-function]] which must
define a \emph{less-than}-predicate of the values [[split-function]]
delivers. The result is a list containing the sorted sublists.

<<Splitting lists into sublists --- [[split-list]]>>=
(defun split-list (split-function list &key sortfunc headfunc)
  #+:ASSERT! (assert (not (and sortfunc headfunc))
                     "split-list")
  (let ((list-len (length list)))
    (if (= 1 list-len)
        (list list)
        (let ((split-table (make-hash-table :test #'equal
                                            :size (round (* 1.2 list-len))))
              (key-list '()))
          (mapc #'(lambda (elt)
                    (let ((key (funcall split-function elt)))
                      (setf (gethash key split-table)
                            (cons elt (gethash key split-table)))))
                list)
          (maphash #'(lambda (key element)
                       (declare (ignore element))
                       (push key key-list))
                   split-table)
          (maplist #'(lambda (rest-list)
                       (let ((entries (gethash (car rest-list) split-table)))
                         (if headfunc
                             (let ((head (find-if headfunc entries)))
                               (rplaca rest-list
                                       (if head
                                           (cons head (delete head entries))
                                           entries)))
                             (rplaca rest-list entries))))
                   (if sortfunc (sort key-list sortfunc) key-list))
          key-list))))

#|
This version seems to be a little bit slower than the above one,
despite the fact that we use a temporary array with a fill-pointer.

(defun split-list (split-function sort-function list)
  (let ((list-len (length list)))
    (if (= 1 list-len)
        (list list)
        (let ((split-table (make-hash-table :test #'equal
                                            :size (round (* 1.5 list-len)))))
          (mapc #'(lambda (elt)
                    (let ((key (funcall split-function elt)))
                      (setf (gethash key split-table)
                            (cons elt (gethash key split-table)))))
                list)
          (let ((sort-array (make-array (hash-table-count split-table)
                                        :fill-pointer 0)))
            (maphash #'(lambda (key element)
                         (declare (ignore element))
                         (vector-push key sort-array))
                     split-table)
            (map 'list
                 #'(lambda (key)
                     (gethash key split-table))
                 (sort sort-array sort-function)))))))
|#
@ %def split-list

<<Export-list of module \module{base}>>=
(export '(split-list))
@


%% $Log$
%% Revision 1.19  1997/03/18 14:49:33  kehr
%% Checkin after the several changes. a) the definition of slot-accessor
%% macros in the whole source, b) the modifications suggested by Bernd
%% Raichle to make the source compatible with Allegro CL and c) a first
%% version of the new sorting scheme.
%%
%% Revision 1.18  1997/03/13 14:40:40  kehr
%% Changed all IN-PACKAGE, DEFPACKAGE, REQUIRE, PROVIDE declarations to
%% be compatible with ANSI CL. Bug was reported by Bernd Raichle.
%%
%% Revision 1.17  1997/02/11 11:09:20  kehr
%% Changed Imakefile and revisited source.
%%
%% Revision 1.16  1997/01/23 21:32:24  kehr
%% Added global tracing-flags *....-trace*.
%%
%% Revision 1.15  1997/01/23 19:04:12  kehr
%% Added (oops*)-function.
%%
%% Revision 1.14  1997/01/17 16:41:35  kehr
%% Minor changes.
%%
%% Revision 1.13  1996/07/22  15:52:28  kehr
%% Changed the error-system-macros.
%%
%% Revision 1.12  1996/07/11  14:15:36  kehr
%% Complete Major checkin before changing the letter-groups.
%%
%% Revision 1.11  1996/07/03  18:41:34  kehr
%% Checkin after some modifications of the error-system and the loading of
%% indexstyle-modules have been made. Affects all modules.
%%
%% Revision 1.10  1996/06/24  09:12:09  kehr
%% Several changes in all Lisp-modules due to the new startup-module and
%% the implementation of the percentage bar appearing in the processing
%% phases.
%%
%% Revision 1.9  1996/05/29  14:15:18  kehr
%% Complete checkin after the major changes in the markup. See ChangeLog
%% for details.
%%
%% Revision 1.8  1996/05/20  08:45:55  kehr
%% Added macro `ifnot'.
%%
%% Revision 1.7  1996/05/09  11:49:01  kehr
%% Changes in all submodules, due to macro-expansion problems during
%% compilation.
%%
%% Revision 1.6  1996/04/29  08:36:54  kehr
%% Added assert! macro.
%%
%% Revision 1.5  1996/01/31  16:19:02  kehr
%% .
%%
%% Revision 1.4  1996/01/09  14:25:23  kehr
%% Minor modifications.
%%
%% Revision 1.3  1995/12/19  10:57:51  kehr
%% Minor changes.
%%
%% Revision 1.2  1995/11/29  16:51:04  kehr
%% Moved get-next-ordnum to module `locref'.
%%
%% Revision 1.1  1995/11/19  18:38:55  kehr
%% Introduced packages base and locref.
%%
%% Revision 1.2  1995/11/08  16:17:56  kehr
%% Minor modifications.
%%
%% Revision 1.1  1995/10/16  19:23:04  kehr
%% Initial source checkin.
%%
%% Revision 1.6  1995/07/26  16:19:52  kehr
%% Added support for the pretty-printer module. Output of data-structures
%% now looks more readable.
%%
%% Revision 1.5  1995/07/23  20:48:31  kehr
%% Major changes in the location-reference-processing. Full support for
%% merge-to and separate-mixed--rules. The whole processing of
%% location-refernces is more structured now and can be easier maintained.
%%
%% Revision 1.4  1995/07/23  14:14:07  kehr
%% Added support for merge-to--rule. Now works and creates
%% virtual-attributes as expected.
%%
%% Revision 1.3  1995/07/11  15:14:14  kehr
%% Today I finished the definition of indexentries. They now will be
%% inserted into the index when a appropriate location-class was finished.
%%
%% Revision 1.2  1995/07/10  00:58:15  kehr
%% Completed noweb-support. Current version must be debugged to correct
%% some minor errors.
%%
%% Revision 1.1  1995/07/09  18:14:26  kehr
%% Initial checkin.

%% Local Variables:
%% mode: lisp
%% TeX-master: t
%% End:
